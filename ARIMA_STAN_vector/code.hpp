
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace code_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 82> locations_array__ = 
{" (found before start of program)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 18, column 2 to column 21)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 19, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 22, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 25, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 26, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 36, column 2 to column 36)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 37, column 2 to column 34)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 50, column 2 to column 24)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 53, column 2 to column 56)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 39, column 4 to column 61)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 38, column 17 to line 40, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 38, column 2 to line 40, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 42, column 4 to column 61)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 41, column 17 to line 43, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 41, column 2 to line 43, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 51, column 2 to column 29)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 52, column 2 to column 69)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 118, column 2 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 119, column 2 to column 67)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 122, column 4 to column 24)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 130, column 1 to column 60)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 129, column 13 to line 131, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 128, column 1 to column 56)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 127, column 27 to line 129, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 127, column 13 to line 131, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 126, column 1 to column 56)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 125, column 19 to line 127, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 125, column 6 to line 131, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 124, column 19 to line 132, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 124, column 4 to line 132, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 136, column 1 to column 41)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 135, column 19 to line 137, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 135, column 6 to line 137, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 134, column 19 to line 138, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 134, column 4 to line 138, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 143, column 6 to column 70)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 142, column 11 to line 144, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 141, column 6 to column 66)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 140, column 16 to line 142, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 140, column 4 to line 144, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 120, column 17 to line 146, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 120, column 2 to line 146, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 58, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 58, column 2 to column 33)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 59, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 59, column 2 to column 16)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 64, column 4 to column 36)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 63, column 17 to line 65, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 63, column 2 to line 65, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 90, column 1 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 89, column 21 to line 91, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 89, column 6 to line 91, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 88, column 19 to line 92, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 88, column 4 to line 92, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 93, column 4 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 87, column 17 to line 94, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 87, column 2 to line 94, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 98, column 2 to column 26)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 99, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 101, column 2 to column 29)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 101, column 25 to column 26)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 103, column 2 to column 24)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 104, column 2 to column 26)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 108, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 4, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 6, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 7, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 9, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 9, column 2 to column 14)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 12, column 26 to column 27)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 12, column 2 to column 40)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 18, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 19, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 25, column 9 to column 12)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 26, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 36, column 27 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 37, column 27 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 50, column 9 to column 14)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 53, column 9 to column 12)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 118, column 8 to column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/copie_temporanee/bayes_colab/ARIMA_STAN_vector/code.stan', line 119, column 8 to column 9)"};




class code_model final : public model_base_crtp<code_model> {

 private:
  int T;
  int p;
  int q;
  Eigen::Matrix<double, -1, 1> y_data__;
  Eigen::Matrix<double, -1, 1> is_missing_data__;
  int y_start_1dim__;
  int right_y_1dim__;
  int D_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> is_missing{nullptr, 0};
 
 public:
  ~code_model() { }
  
  inline std::string model_name() const final { return "code_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  code_model(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::code_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 65;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 65;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 66;
      context__.validate_dims("data initialization","p","int",
           std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      
      
      current_statement__ = 66;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 67;
      context__.validate_dims("data initialization","q","int",
           std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      
      
      current_statement__ = 67;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "q", q, 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("y", "T", T);
      current_statement__ = 69;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      y_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_data__.data(), T);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 69;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 69;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 69;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 70;
      stan::math::validate_non_negative_index("is_missing", "T", T);
      current_statement__ = 71;
      context__.validate_dims("data initialization","is_missing","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      is_missing_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      new (&is_missing) Eigen::Map<Eigen::Matrix<double, -1, 1>>(is_missing_data__.data(), T);
        
      
      {
        std::vector<local_scalar_t__> is_missing_flat__;
        current_statement__ = 71;
        is_missing_flat__ = context__.vals_r("is_missing");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 71;
          stan::model::assign(is_missing, is_missing_flat__[(pos__ - 1)],
            "assigning variable is_missing", stan::model::index_uni(sym1__));
          current_statement__ = 71;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "is_missing",
                                            is_missing, 0);
      current_statement__ = 71;
      stan::math::check_less_or_equal(function__, "is_missing", is_missing, 1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("gamma_th", "q", q);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("gamma_phi", "p", p);
      current_statement__ = 74;
      y_start_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 74;
      y_start_1dim__ = (p + 1);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("y_start", "p + 1",
                                              y_start_1dim__);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("y_missing", "T", T);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("theta", "q", q);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("phi", "p", p);
      current_statement__ = 78;
      right_y_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 78;
      right_y_1dim__ = ((T + p) + 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("right_y", "T + p + 1",
                                              right_y_1dim__);
      current_statement__ = 79;
      D_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 79;
      D_1dim__ = (T + p);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("D", "T + p", D_1dim__);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("y_post_pred", "T", T);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("err_post_pred", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = q + p + 1 + y_start_1dim__ + T;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_th =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 1;
      gamma_th = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   q);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_phi =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 2;
      gamma_phi = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    p);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_start =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(y_start_1dim__,
           DUMMY_VAR__);
      current_statement__ = 4;
      y_start = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  y_start_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 5;
      y_missing = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    T);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 12;
      for (int j = 1; j <= q; ++j) {
        current_statement__ = 10;
        stan::model::assign(theta,
          ((stan::math::exp(
              stan::model::rvalue(gamma_th, "gamma_th",
                stan::model::index_uni(j))) - 1) /
            (stan::math::exp(
               stan::model::rvalue(gamma_th, "gamma_th",
                 stan::model::index_uni(j))) + 1)),
          "assigning variable theta", stan::model::index_uni(j));
      }
      current_statement__ = 15;
      for (int j = 1; j <= p; ++j) {
        current_statement__ = 13;
        stan::model::assign(phi,
          ((stan::math::exp(
              stan::model::rvalue(gamma_phi, "gamma_phi",
                stan::model::index_uni(j))) - 1) /
            (stan::math::exp(
               stan::model::rvalue(gamma_phi, "gamma_phi",
                 stan::model::index_uni(j))) + 1)),
          "assigning variable phi", stan::model::index_uni(j));
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> right_y =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(right_y_1dim__,
           DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(right_y, y_start,
        "assigning variable right_y", stan::model::index_min_max(1, (p + 1)));
      current_statement__ = 17;
      stan::model::assign(right_y,
        stan::math::add(stan::math::elt_multiply(y_missing, is_missing),
          stan::math::elt_multiply(y, stan::math::subtract(1, is_missing))),
        "assigning variable right_y", stan::model::index_min_max((p + 2), 
                                        ((T + p) + 1)));
      Eigen::Matrix<local_scalar_t__, -1, 1> D =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(D_1dim__,
           DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(D,
        stan::math::subtract(
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(2, ((T + p) + 1))),
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(1, (T + p)))), "assigning variable D");
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "theta", theta, -1);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "theta", theta, 1);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "phi", phi, -1);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "phi", phi, 1);
      {
        current_statement__ = 43;
        stan::math::validate_non_negative_index("nu", "T", T);
        Eigen::Matrix<local_scalar_t__, -1, 1> nu =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
        current_statement__ = 44;
        stan::model::assign(nu, stan::math::rep_vector(0, T),
          "assigning variable nu");
        current_statement__ = 45;
        stan::math::validate_non_negative_index("err", "T", T);
        Eigen::Matrix<local_scalar_t__, -1, 1> err =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
        current_statement__ = 49;
        for (int j = 1; j <= p; ++j) {
          current_statement__ = 47;
          stan::model::assign(nu,
            stan::math::add(stan::model::deep_copy(nu),
              stan::math::multiply(
                stan::model::rvalue(phi, "phi", stan::model::index_uni(j)),
                stan::model::rvalue(D, "D",
                  stan::model::index_min_max(((1 - j) + p), ((T - j) + p))))),
            "assigning variable nu");
        }
        current_statement__ = 57;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 54;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 52;
            if (stan::math::logical_gt((t - j), 0)) {
              current_statement__ = 50;
              stan::model::assign(nu,
                (stan::model::rvalue(nu, "nu", stan::model::index_uni(t)) +
                  (stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(j)) *
                    stan::model::rvalue(err, "err",
                      stan::model::index_uni((t - j))))),
                "assigning variable nu", stan::model::index_uni(t));
            } 
          }
          current_statement__ = 55;
          stan::model::assign(err,
            (stan::model::rvalue(D, "D", stan::model::index_uni((t + p))) -
              stan::model::rvalue(nu, "nu", stan::model::index_uni(t))),
            "assigning variable err", stan::model::index_uni(t));
        }
        current_statement__ = 58;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_phi, 0, 1));
        current_statement__ = 59;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_th, 0, 1));
        current_statement__ = 60;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 5));
        current_statement__ = 61;
        if (stan::math::logical_lt(sigma, 0)) {
          current_statement__ = 61;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 61;
          lp_accum__.add(-stan::math::cauchy_lccdf(0, 0, 5));
        }
        current_statement__ = 62;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_start, 1, 1));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_missing, 1, 1));
        current_statement__ = 64;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(err, 0, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> gamma_th =
         Eigen::Matrix<double, -1, 1>::Constant(q,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      gamma_th = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   q);
      Eigen::Matrix<double, -1, 1> gamma_phi =
         Eigen::Matrix<double, -1, 1>::Constant(p,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      gamma_phi = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    p);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> y_start =
         Eigen::Matrix<double, -1, 1>::Constant(y_start_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      y_start = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  y_start_1dim__);
      Eigen::Matrix<double, -1, 1> y_missing =
         Eigen::Matrix<double, -1, 1>::Constant(T,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      y_missing = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    T);
      Eigen::Matrix<double, -1, 1> theta =
         Eigen::Matrix<double, -1, 1>::Constant(q,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> phi =
         Eigen::Matrix<double, -1, 1>::Constant(p,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> right_y =
         Eigen::Matrix<double, -1, 1>::Constant(right_y_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> D =
         Eigen::Matrix<double, -1, 1>::Constant(D_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(gamma_th);
      out__.write(gamma_phi);
      out__.write(sigma);
      out__.write(y_start);
      out__.write(y_missing);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      for (int j = 1; j <= q; ++j) {
        current_statement__ = 10;
        stan::model::assign(theta,
          ((stan::math::exp(
              stan::model::rvalue(gamma_th, "gamma_th",
                stan::model::index_uni(j))) - 1) /
            (stan::math::exp(
               stan::model::rvalue(gamma_th, "gamma_th",
                 stan::model::index_uni(j))) + 1)),
          "assigning variable theta", stan::model::index_uni(j));
      }
      current_statement__ = 15;
      for (int j = 1; j <= p; ++j) {
        current_statement__ = 13;
        stan::model::assign(phi,
          ((stan::math::exp(
              stan::model::rvalue(gamma_phi, "gamma_phi",
                stan::model::index_uni(j))) - 1) /
            (stan::math::exp(
               stan::model::rvalue(gamma_phi, "gamma_phi",
                 stan::model::index_uni(j))) + 1)),
          "assigning variable phi", stan::model::index_uni(j));
      }
      current_statement__ = 16;
      stan::model::assign(right_y, y_start,
        "assigning variable right_y", stan::model::index_min_max(1, (p + 1)));
      current_statement__ = 17;
      stan::model::assign(right_y,
        stan::math::add(stan::math::elt_multiply(y_missing, is_missing),
          stan::math::elt_multiply(y, stan::math::subtract(1, is_missing))),
        "assigning variable right_y", stan::model::index_min_max((p + 2), 
                                        ((T + p) + 1)));
      current_statement__ = 9;
      stan::model::assign(D,
        stan::math::subtract(
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(2, ((T + p) + 1))),
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(1, (T + p)))), "assigning variable D");
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "theta", theta, -1);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "theta", theta, 1);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "phi", phi, -1);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "phi", phi, 1);
      if (emit_transformed_parameters__) {
        out__.write(theta);
        out__.write(phi);
        out__.write(right_y);
        out__.write(D);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> y_post_pred =
         std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> err_post_pred =
         std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      stan::model::assign(err_post_pred,
        stan::math::normal_rng(stan::math::rep_vector(0, T), sigma,
          base_rng__), "assigning variable err_post_pred");
      current_statement__ = 42;
      for (int t = 1; t <= T; ++t) {
        double mean_val = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 20;
        mean_val = 0.0;
        current_statement__ = 30;
        for (int j = 1; j <= p; ++j) {
          current_statement__ = 28;
          if (stan::math::logical_lt((t - j), 1)) {
            current_statement__ = 26;
            mean_val = (mean_val +
                         (stan::model::rvalue(phi, "phi",
                            stan::model::index_uni(j)) *
                           (stan::model::rvalue(y_start, "y_start",
                              stan::model::index_uni((((p + t) - j) + 1))) -
                             stan::model::rvalue(y_start, "y_start",
                               stan::model::index_uni(((p + t) - j))))));
          } else {
            current_statement__ = 25;
            if (stan::math::logical_eq((t - j), 1)) {
              current_statement__ = 23;
              mean_val = (mean_val +
                           (stan::model::rvalue(phi, "phi",
                              stan::model::index_uni(j)) *
                             (stan::model::rvalue(y_post_pred, "y_post_pred",
                                stan::model::index_uni((t - j))) -
                               stan::model::rvalue(y_start, "y_start",
                                 stan::model::index_uni(((p + t) - j))))));
            } else {
              current_statement__ = 21;
              mean_val = (mean_val +
                           (stan::model::rvalue(phi, "phi",
                              stan::model::index_uni(j)) *
                             (stan::model::rvalue(y_post_pred, "y_post_pred",
                                stan::model::index_uni((t - j))) -
                               stan::model::rvalue(y_post_pred,
                                 "y_post_pred",
                                 stan::model::index_uni(((t - j) - 1))))));
            }
          }
        }
        current_statement__ = 35;
        for (int j = 1; j <= q; ++j) {
          current_statement__ = 33;
          if (stan::math::logical_gt((t - j), 0)) {
            current_statement__ = 31;
            mean_val = (mean_val +
                         (stan::model::rvalue(theta, "theta",
                            stan::model::index_uni(j)) *
                           stan::model::rvalue(err_post_pred,
                             "err_post_pred",
                             stan::model::index_uni((t - j)))));
          } 
        }
        current_statement__ = 40;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 38;
          stan::model::assign(y_post_pred,
            ((stan::model::rvalue(y_start, "y_start",
                stan::model::index_uni((p + 1))) + mean_val) +
              stan::model::rvalue(err_post_pred, "err_post_pred",
                stan::model::index_uni(t))),
            "assigning variable y_post_pred", stan::model::index_uni(t));
        } else {
          current_statement__ = 36;
          stan::model::assign(y_post_pred,
            ((stan::model::rvalue(y_post_pred, "y_post_pred",
                stan::model::index_uni((t - 1))) + mean_val) +
              stan::model::rvalue(err_post_pred, "err_post_pred",
                stan::model::index_uni(t))),
            "assigning variable y_post_pred", stan::model::index_uni(t));
        }
      }
      out__.write(y_post_pred);
      out__.write(err_post_pred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_th =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        stan::model::assign(gamma_th, in__.read<local_scalar_t__>(),
          "assigning variable gamma_th", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_th);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_phi =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        stan::model::assign(gamma_phi, in__.read<local_scalar_t__>(),
          "assigning variable gamma_phi", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_phi);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_start =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(y_start_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= y_start_1dim__; ++sym1__) {
        stan::model::assign(y_start, in__.read<local_scalar_t__>(),
          "assigning variable y_start", stan::model::index_uni(sym1__));
      }
      out__.write(y_start);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        stan::model::assign(y_missing, in__.read<local_scalar_t__>(),
          "assigning variable y_missing", stan::model::index_uni(sym1__));
      }
      out__.write(y_missing);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"gamma_th", "gamma_phi", "sigma",
      "y_start", "y_missing", "theta", "phi", "right_y", "D", "y_post_pred",
      "err_post_pred"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(q)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(p)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(y_start_1dim__)},
      std::vector<size_t>{static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(q)},
      std::vector<size_t>{static_cast<size_t>(p)},
      std::vector<size_t>{static_cast<size_t>(right_y_1dim__)},
      std::vector<size_t>{static_cast<size_t>(D_1dim__)},
      std::vector<size_t>{static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(T)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_th" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_phi" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= y_start_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_start" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= right_y_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "right_y" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= D_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "err_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_th" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_phi" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= y_start_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_start" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= right_y_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "right_y" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= D_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "err_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma_th\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"gamma_phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_start\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_start_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"transformed_parameters\"},{\"name\":\"right_y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(right_y_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(D_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"err_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma_th\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"gamma_phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_start\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_start_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"transformed_parameters\"},{\"name\":\"right_y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(right_y_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(D_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"err_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((q + p) + 1) + y_start_1dim__) + T);
      const size_t num_transformed = emit_transformed_parameters * 
  (((q + p) + right_y_1dim__) + D_1dim__);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (T + T);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((q + p) + 1) + y_start_1dim__) + T);
      const size_t num_transformed = emit_transformed_parameters * 
  (((q + p) + right_y_1dim__) + D_1dim__);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (T + T);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"gamma_th", "gamma_phi",
      "sigma", "y_start", "y_missing"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{q, p, 
       1, y_start_1dim__, T};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = code_model_namespace::code_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return code_model_namespace::profiles__;
}

#endif


