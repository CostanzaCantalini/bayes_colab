
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace code_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 79> locations_array__ = 
{" (found before start of program)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 37, column 8 to column 35)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 38, column 8 to column 37)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 39, column 8 to column 37)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 40, column 8 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 41, column 8 to column 26)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 42, column 8 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 92, column 8 to column 64)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 46, column 15 to column 16)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 46, column 8 to column 21)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 47, column 15 to column 16)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 47, column 8 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 63, column 12 to column 88)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 64, column 12 to column 49)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 70, column 16 to column 103)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 71, column 16 to column 47)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 69, column 19 to line 72, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 67, column 16 to column 103)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 68, column 16 to column 55)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 66, column 34 to line 69, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 66, column 12 to line 72, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 62, column 15 to line 74, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 51, column 12 to column 88)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 52, column 12 to column 57)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 58, column 16 to column 111)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 59, column 16 to column 55)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 57, column 19 to line 60, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 55, column 16 to column 111)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 56, column 16 to column 63)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 54, column 34 to line 57, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 54, column 12 to line 60, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 50, column 30 to line 62, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 50, column 8 to line 74, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 77, column 12 to column 133)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 78, column 12 to column 65)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 76, column 23 to line 79, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 76, column 8 to line 79, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 81, column 8 to column 35)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 81, column 32 to column 33)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 81, column 30 to column 31)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 82, column 8 to column 37)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 82, column 34 to column 35)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 82, column 32 to column 33)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 83, column 8 to column 37)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 83, column 34 to column 35)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 83, column 32 to column 33)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 84, column 8 to column 35)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 84, column 31 to column 32)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 85, column 8 to column 31)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 87, column 8 to column 30)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 88, column 8 to column 32)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 31, column 8 to column 23)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 32, column 14 to column 15)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 32, column 8 to column 24)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 33, column 14 to column 15)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 33, column 8 to column 49)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 42, column 15 to column 16)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 92, column 14 to column 15)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 10, column 20 to column 45)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 9, column 23 to line 11, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 8, column 20 to column 53)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 7, column 39 to line 9, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 7, column 16 to line 11, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 6, column 23 to line 12, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 6, column 12 to line 12, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 24, column 20 to column 41)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 23, column 23 to line 25, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 22, column 20 to column 49)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 21, column 41 to line 23, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 21, column 16 to line 25, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 20, column 19 to line 26, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 18, column 20 to column 49)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 17, column 23 to line 19, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 16, column 20 to column 57)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 15, column 41 to line 17, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 15, column 16 to line 19, column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 14, column 35 to line 20, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 14, column 12 to line 26, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARMA_bayesian_stan/code.stan', line 4, column 96 to line 27, column 9)"};

struct f_functor__ {
  template <typename T1__, typename T3__, typename T4__,
            stan::require_all_t<stan::is_stan_scalar<T1__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_col_vector<T4__>,
                                stan::is_vt_not_complex<T4__>>* = nullptr>
  stan::promote_args_t<T1__, stan::base_type_t<T3__>, stan::base_type_t<T4__>>
  operator()(const int& i, const std::vector<T1__>& y,
             const std::vector<int>& is_missing, const T3__& y_missing,
             const T4__& y_start, std::ostream* pstream__) const;
};

template <typename T1__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
  stan::promote_args_t<T1__, stan::base_type_t<T3__>, stan::base_type_t<T4__>>
  f(const int& i, const std::vector<T1__>& y,
    const std::vector<int>& is_missing, const T3__& y_missing_arg__,
    const T4__& y_start_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T1__, stan::base_type_t<T3__>,
                                 stan::base_type_t<T4__>>;
    int current_statement__ = 0; 
    const auto& y_missing = stan::math::to_ref(y_missing_arg__);
    const auto& y_start = stan::math::to_ref(y_start_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 64;
      if (stan::math::logical_eq(i, 1)) {
        current_statement__ = 62;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_missing, "is_missing",
                stan::model::index_uni(1)), 1)) {
          current_statement__ = 60;
          return (stan::model::rvalue(y_missing, "y_missing",
                    stan::model::index_uni(1)) -
                   stan::model::rvalue(y_start, "y_start",
                     stan::model::index_uni(3)));
        } else {
          current_statement__ = 58;
          return (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
                   stan::model::rvalue(y_start, "y_start",
                     stan::model::index_uni(3)));
        }
      } 
      current_statement__ = 77;
      if (stan::math::logical_eq(
            stan::model::rvalue(is_missing, "is_missing",
              stan::model::index_uni(i)), 1)) {
        current_statement__ = 75;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_missing, "is_missing",
                stan::model::index_uni((i - 1))), 1)) {
          current_statement__ = 73;
          return (stan::model::rvalue(y_missing, "y_missing",
                    stan::model::index_uni(i)) -
                   stan::model::rvalue(y_missing, "y_missing",
                     stan::model::index_uni((i - 1))));
        } else {
          current_statement__ = 71;
          return (stan::model::rvalue(y_missing, "y_missing",
                    stan::model::index_uni(i)) -
                   stan::model::rvalue(y, "y",
                     stan::model::index_uni((i - 1))));
        }
      } else {
        current_statement__ = 69;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_missing, "is_missing",
                stan::model::index_uni((i - 1))), 1)) {
          current_statement__ = 67;
          return (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
                   stan::model::rvalue(y_missing, "y_missing",
                     stan::model::index_uni((i - 1))));
        } else {
          current_statement__ = 65;
          return (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
                   stan::model::rvalue(y, "y",
                     stan::model::index_uni((i - 1))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T1__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
stan::promote_args_t<T1__, stan::base_type_t<T3__>, stan::base_type_t<T4__>>
f_functor__::operator()(const int& i, const std::vector<T1__>& y,
                        const std::vector<int>& is_missing,
                        const T3__& y_missing, const T4__& y_start,
                        std::ostream* pstream__)  const
{
  return f(i, y, is_missing, y_missing, y_start, pstream__);
}

 class code_model final : public model_base_crtp<code_model> {

 private:
  int T;
  std::vector<double> y;
  std::vector<int> is_missing; 
  
 
 public:
  ~code_model() { }
  
  inline std::string model_name() const final { return "code_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  code_model(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::code_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 51;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 51;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("y", "T", T);
      current_statement__ = 53;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      y = std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 53;
      y = context__.vals_r("y");
      current_statement__ = 54;
      stan::math::validate_non_negative_index("is_missing", "T", T);
      current_statement__ = 55;
      context__.validate_dims("data initialization","is_missing","int",
           std::vector<size_t>{static_cast<size_t>(T)});
      is_missing = std::vector<int>(T, std::numeric_limits<int>::min());
      
      
      current_statement__ = 55;
      is_missing = context__.vals_i("is_missing");
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "is_missing",
                                            is_missing, 0);
      current_statement__ = 55;
      stan::math::check_less_or_equal(function__, "is_missing", is_missing, 1);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("y_missing", "T", T);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("missing_data", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 3 + T;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 1;
      phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
              -1, 1, lp__);
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 2;
      theta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                -1, 1, lp__);
      local_scalar_t__ phi_2 = DUMMY_VAR__;
      current_statement__ = 3;
      phi_2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                -1, 1, lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_start =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 5;
      y_start = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(3);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 6;
      y_missing = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    T);
      {
        current_statement__ = 8;
        stan::math::validate_non_negative_index("nu", "T", T);
        Eigen::Matrix<local_scalar_t__, -1, 1> nu =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
        current_statement__ = 10;
        stan::math::validate_non_negative_index("err", "T", T);
        Eigen::Matrix<local_scalar_t__, -1, 1> err =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
        current_statement__ = 32;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_missing, "is_missing",
                stan::model::index_uni(1)), 1)) {
          current_statement__ = 22;
          stan::model::assign(nu,
            ((phi *
               (stan::model::rvalue(y_start, "y_start",
                  stan::model::index_uni(3)) -
                 stan::model::rvalue(y_start, "y_start",
                   stan::model::index_uni(2)))) +
              (phi_2 *
                (stan::model::rvalue(y_start, "y_start",
                   stan::model::index_uni(2)) -
                  stan::model::rvalue(y_start, "y_start",
                    stan::model::index_uni(1))))),
            "assigning variable nu", stan::model::index_uni(1));
          current_statement__ = 23;
          stan::model::assign(err,
            ((stan::model::rvalue(y_missing, "y_missing",
                stan::model::index_uni(1)) -
               stan::model::rvalue(y_start, "y_start",
                 stan::model::index_uni(3))) -
              stan::model::rvalue(nu, "nu", stan::model::index_uni(1))),
            "assigning variable err", stan::model::index_uni(1));
          current_statement__ = 30;
          if (stan::math::logical_eq(
                stan::model::rvalue(is_missing, "is_missing",
                  stan::model::index_uni(2)), 1)) {
            current_statement__ = 27;
            stan::model::assign(nu,
              (((phi *
                  (stan::model::rvalue(y_missing, "y_missing",
                     stan::model::index_uni(1)) -
                    stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)))) +
                 (phi_2 *
                   (stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)) -
                     stan::model::rvalue(y_start, "y_start",
                       stan::model::index_uni(2))))) +
                (theta *
                  stan::model::rvalue(err, "err", stan::model::index_uni(1)))),
              "assigning variable nu", stan::model::index_uni(2));
            current_statement__ = 28;
            stan::model::assign(err,
              ((stan::model::rvalue(y_missing, "y_missing",
                  stan::model::index_uni(2)) -
                 stan::model::rvalue(y_missing, "y_missing",
                   stan::model::index_uni(1))) -
                stan::model::rvalue(nu, "nu", stan::model::index_uni(2))),
              "assigning variable err", stan::model::index_uni(2));
          } else {
            current_statement__ = 24;
            stan::model::assign(nu,
              (((phi *
                  (stan::model::rvalue(y_missing, "y_missing",
                     stan::model::index_uni(1)) -
                    stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)))) +
                 (phi_2 *
                   (stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)) -
                     stan::model::rvalue(y_start, "y_start",
                       stan::model::index_uni(2))))) +
                (theta *
                  stan::model::rvalue(err, "err", stan::model::index_uni(1)))),
              "assigning variable nu", stan::model::index_uni(2));
            current_statement__ = 25;
            stan::model::assign(err,
              ((stan::model::rvalue(y, "y", stan::model::index_uni(2)) -
                 stan::model::rvalue(y_missing, "y_missing",
                   stan::model::index_uni(1))) -
                stan::model::rvalue(nu, "nu", stan::model::index_uni(2))),
              "assigning variable err", stan::model::index_uni(2));
          }
        } else {
          current_statement__ = 12;
          stan::model::assign(nu,
            ((phi *
               (stan::model::rvalue(y_start, "y_start",
                  stan::model::index_uni(3)) -
                 stan::model::rvalue(y_start, "y_start",
                   stan::model::index_uni(2)))) +
              (phi_2 *
                (stan::model::rvalue(y_start, "y_start",
                   stan::model::index_uni(2)) -
                  stan::model::rvalue(y_start, "y_start",
                    stan::model::index_uni(1))))),
            "assigning variable nu", stan::model::index_uni(1));
          current_statement__ = 13;
          stan::model::assign(err,
            ((stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
               stan::model::rvalue(y_start, "y_start",
                 stan::model::index_uni(3))) -
              stan::model::rvalue(nu, "nu", stan::model::index_uni(1))),
            "assigning variable err", stan::model::index_uni(1));
          current_statement__ = 20;
          if (stan::math::logical_eq(
                stan::model::rvalue(is_missing, "is_missing",
                  stan::model::index_uni(2)), 1)) {
            current_statement__ = 17;
            stan::model::assign(nu,
              (((phi *
                  (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
                    stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)))) +
                 (phi_2 *
                   (stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)) -
                     stan::model::rvalue(y_start, "y_start",
                       stan::model::index_uni(2))))) +
                (theta *
                  stan::model::rvalue(err, "err", stan::model::index_uni(1)))),
              "assigning variable nu", stan::model::index_uni(2));
            current_statement__ = 18;
            stan::model::assign(err,
              ((stan::model::rvalue(y_missing, "y_missing",
                  stan::model::index_uni(2)) -
                 stan::model::rvalue(y, "y", stan::model::index_uni(1))) -
                stan::model::rvalue(nu, "nu", stan::model::index_uni(2))),
              "assigning variable err", stan::model::index_uni(2));
          } else {
            current_statement__ = 14;
            stan::model::assign(nu,
              (((phi *
                  (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
                    stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)))) +
                 (phi_2 *
                   (stan::model::rvalue(y_start, "y_start",
                      stan::model::index_uni(3)) -
                     stan::model::rvalue(y_start, "y_start",
                       stan::model::index_uni(2))))) +
                (theta *
                  stan::model::rvalue(err, "err", stan::model::index_uni(1)))),
              "assigning variable nu", stan::model::index_uni(2));
            current_statement__ = 15;
            stan::model::assign(err,
              ((stan::model::rvalue(y, "y", stan::model::index_uni(2)) -
                 stan::model::rvalue(y, "y", stan::model::index_uni(1))) -
                stan::model::rvalue(nu, "nu", stan::model::index_uni(2))),
              "assigning variable err", stan::model::index_uni(2));
          }
        }
        current_statement__ = 36;
        for (int t = 3; t <= T; ++t) {
          current_statement__ = 33;
          stan::model::assign(nu,
            (((phi *
                f((t - 1), y, is_missing, y_missing, y_start, pstream__)) +
               (phi_2 *
                 f((t - 2), y, is_missing, y_missing, y_start, pstream__))) +
              (theta *
                stan::model::rvalue(err, "err",
                  stan::model::index_uni((t - 1))))),
            "assigning variable nu", stan::model::index_uni(t));
          current_statement__ = 34;
          stan::model::assign(err,
            (f(t, y, is_missing, y_missing, y_start, pstream__) -
              stan::model::rvalue(nu, "nu", stan::model::index_uni(t))),
            "assigning variable err", stan::model::index_uni(t));
        }
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(phi, 0, 2));
        current_statement__ = 39;
        if (stan::math::logical_lt(phi, -1)) {
          current_statement__ = 39;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 38;
          if (stan::math::logical_gt(phi, 1)) {
            current_statement__ = 38;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 38;
            lp_accum__.add(
              -stan::math::log_diff_exp(stan::math::normal_lcdf(1, 0, 2),
                 stan::math::normal_lcdf(-1, 0, 2)));
          }
        }
        current_statement__ = 40;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(theta, 0, 2));
        current_statement__ = 42;
        if (stan::math::logical_lt(theta, -1)) {
          current_statement__ = 42;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 41;
          if (stan::math::logical_gt(theta, 1)) {
            current_statement__ = 41;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 41;
            lp_accum__.add(
              -stan::math::log_diff_exp(stan::math::normal_lcdf(1, 0, 2),
                 stan::math::normal_lcdf(-1, 0, 2)));
          }
        }
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(phi_2, 0, 2));
        current_statement__ = 45;
        if (stan::math::logical_lt(phi_2, -1)) {
          current_statement__ = 45;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 44;
          if (stan::math::logical_gt(phi_2, 1)) {
            current_statement__ = 44;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 44;
            lp_accum__.add(
              -stan::math::log_diff_exp(stan::math::normal_lcdf(1, 0, 2),
                 stan::math::normal_lcdf(-1, 0, 2)));
          }
        }
        current_statement__ = 46;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 5));
        current_statement__ = 47;
        if (stan::math::logical_lt(sigma, 0)) {
          current_statement__ = 47;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 47;
          lp_accum__.add(-stan::math::cauchy_lccdf(0, 0, 5));
        }
        current_statement__ = 48;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(err, 0, sigma));
        current_statement__ = 49;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_start, 1, 1));
        current_statement__ = 50;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_missing, 1, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
              -1, 1, lp__);
      double theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      theta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                -1, 1, lp__);
      double phi_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      phi_2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                -1, 1, lp__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> y_start =
         Eigen::Matrix<double, -1, 1>::Constant(3,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      y_start = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(3);
      Eigen::Matrix<double, -1, 1> y_missing =
         Eigen::Matrix<double, -1, 1>::Constant(T,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      y_missing = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    T);
      out__.write(phi);
      out__.write(theta);
      out__.write(phi_2);
      out__.write(sigma);
      out__.write(y_start);
      out__.write(y_missing);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> missing_data =
         std::vector<int>(T, std::numeric_limits<int>::min());
      current_statement__ = 7;
      stan::model::assign(missing_data, is_missing,
        "assigning variable missing_data");
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "missing_data",
                                            missing_data, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "missing_data",
                                         missing_data, 1);
      out__.write(missing_data);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ phi = DUMMY_VAR__;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 1, phi);
      local_scalar_t__ theta = DUMMY_VAR__;
      theta = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 1, theta);
      local_scalar_t__ phi_2 = DUMMY_VAR__;
      phi_2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 1, phi_2);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_start =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        stan::model::assign(y_start, in__.read<local_scalar_t__>(),
          "assigning variable y_start", stan::model::index_uni(sym1__));
      }
      out__.write(y_start);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        stan::model::assign(y_missing, in__.read<local_scalar_t__>(),
          "assigning variable y_missing", stan::model::index_uni(sym1__));
      }
      out__.write(y_missing);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"phi", "theta", "phi_2", "sigma",
      "y_start", "y_missing", "missing_data"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(T)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "phi_2");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_start" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "missing_data" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "phi_2");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_start" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "missing_data" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_start\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"missing_data\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_start\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"missing_data\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + 3) + T);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * T;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + 3) + T);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * T;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 6> names__{"phi", "theta", "phi_2",
      "sigma", "y_start", "y_missing"};
      const std::array<Eigen::Index, 6> constrain_param_sizes__{1, 1, 
       1, 1, 3, T};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = code_model_namespace::code_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return code_model_namespace::profiles__;
}

#endif


