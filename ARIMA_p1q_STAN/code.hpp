
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace code_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 98> locations_array__ = 
{" (found before start of program)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 51, column 2 to column 34)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 52, column 2 to column 36)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 53, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 54, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 55, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 89, column 4 to column 30)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 90, column 4 to column 69)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 93, column 8 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 101, column 16 to column 75)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 100, column 19 to line 102, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 99, column 16 to column 71)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 98, column 33 to line 100, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 98, column 19 to line 102, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 97, column 16 to column 71)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 96, column 25 to line 98, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 96, column 12 to line 102, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 95, column 23 to line 103, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 95, column 8 to line 103, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 107, column 16 to column 56)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 106, column 25 to line 108, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 106, column 12 to line 108, column 13)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 105, column 23 to line 109, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 105, column 8 to line 109, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 114, column 12 to column 76)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 113, column 15 to line 115, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 112, column 12 to column 72)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 111, column 20 to line 113, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 111, column 8 to line 115, column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 91, column 19 to line 117, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 91, column 4 to line 117, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 59, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 59, column 2 to column 15)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 60, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 60, column 2 to column 16)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 64, column 4 to column 16)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 67, column 6 to column 64)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 66, column 19 to line 68, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 66, column 4 to line 68, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 71, column 6 to column 35)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 70, column 19 to line 72, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 70, column 4 to line 72, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 74, column 4 to column 61)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 62, column 17 to line 75, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 62, column 2 to line 75, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 77, column 2 to column 29)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 77, column 26 to column 27)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 77, column 24 to column 25)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 78, column 2 to column 31)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 78, column 28 to column 29)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 78, column 26 to column 27)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 79, column 2 to column 29)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 79, column 25 to column 26)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 80, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 82, column 2 to column 24)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 83, column 2 to column 26)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 43, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 44, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 45, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 46, column 8 to column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 46, column 2 to column 18)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 47, column 8 to column 9)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 47, column 2 to column 43)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 51, column 27 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 52, column 27 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 54, column 9 to column 12)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 55, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 89, column 10 to column 11)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 90, column 10 to column 11)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 7, column 6 to column 43)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 6, column 14 to line 8, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 6, column 4 to line 8, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 14, column 1 to column 28)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 13, column 13 to line 15, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 12, column 1 to column 36)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 11, column 29 to line 13, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 11, column 6 to line 15, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 10, column 15 to line 16, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 10, column 4 to line 16, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 28, column 1 to column 22)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 27, column 13 to line 29, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 26, column 1 to column 30)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 25, column 31 to line 27, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 25, column 6 to line 29, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 24, column 11 to line 30, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 22, column 1 to column 30)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 21, column 13 to line 23, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 20, column 1 to column 38)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 19, column 31 to line 21, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 19, column 6 to line 23, column 7)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 18, column 27 to line 24, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 18, column 4 to line 30, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 4, column 104 to line 31, column 3)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 35, column 6 to column 17)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 34, column 15 to line 36, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 34, column 4 to line 36, column 5)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 37, column 4 to column 18)",
 " (in '/home/br1/PythonProjects/bayesian_project/git_dir/bayes_colab/ARIMA_p1q_STAN/code.stan', line 33, column 28 to line 38, column 3)"};

struct f_functor__ {
  template <typename T3__, typename T5__, typename T6__,
            stan::require_all_t<stan::is_stan_scalar<T3__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_col_vector<T6__>,
                                stan::is_vt_not_complex<T6__>>* = nullptr>
  stan::promote_args_t<T3__, stan::base_type_t<T5__>, stan::base_type_t<T6__>>
  operator()(const int& i, const int& p, const int& q,
             const std::vector<T3__>& y, const std::vector<int>& is_missing,
             const T5__& y_missing, const T6__& y_start,
             std::ostream* pstream__) const;
};
struct g_functor__ {
  template <typename T1__,
            stan::require_all_t<stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T1__>>
  operator()(const int& i, const T1__& err, std::ostream* pstream__) const;
};

template <typename T3__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>* = nullptr>
  stan::promote_args_t<T3__, stan::base_type_t<T5__>, stan::base_type_t<T6__>>
  f(const int& i, const int& p, const int& q, const std::vector<T3__>& y,
    const std::vector<int>& is_missing, const T5__& y_missing_arg__,
    const T6__& y_start_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T3__, stan::base_type_t<T5__>,
                                 stan::base_type_t<T6__>>;
    int current_statement__ = 0; 
    const auto& y_missing = stan::math::to_ref(y_missing_arg__);
    const auto& y_start = stan::math::to_ref(y_start_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 71;
      if (stan::math::logical_lt(i, 1)) {
        current_statement__ = 69;
        return (stan::model::rvalue(y_start, "y_start",
                  stan::model::index_uni(((p + 1) + i))) -
                 stan::model::rvalue(y_start, "y_start",
                   stan::model::index_uni((p + i))));
      } 
      current_statement__ = 78;
      if (stan::math::logical_eq(i, 1)) {
        current_statement__ = 76;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_missing, "is_missing",
                stan::model::index_uni(1)), 1)) {
          current_statement__ = 74;
          return (stan::model::rvalue(y_missing, "y_missing",
                    stan::model::index_uni(1)) -
                   stan::model::rvalue(y_start, "y_start",
                     stan::model::index_uni((p + 1))));
        } else {
          current_statement__ = 72;
          return (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
                   stan::model::rvalue(y_start, "y_start",
                     stan::model::index_uni((p + 1))));
        }
      } 
      current_statement__ = 91;
      if (stan::math::logical_eq(
            stan::model::rvalue(is_missing, "is_missing",
              stan::model::index_uni(i)), 1)) {
        current_statement__ = 89;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_missing, "is_missing",
                stan::model::index_uni((i - 1))), 1)) {
          current_statement__ = 87;
          return (stan::model::rvalue(y_missing, "y_missing",
                    stan::model::index_uni(i)) -
                   stan::model::rvalue(y_missing, "y_missing",
                     stan::model::index_uni((i - 1))));
        } else {
          current_statement__ = 85;
          return (stan::model::rvalue(y_missing, "y_missing",
                    stan::model::index_uni(i)) -
                   stan::model::rvalue(y, "y",
                     stan::model::index_uni((i - 1))));
        }
      } else {
        current_statement__ = 83;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_missing, "is_missing",
                stan::model::index_uni((i - 1))), 1)) {
          current_statement__ = 81;
          return (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
                   stan::model::rvalue(y_missing, "y_missing",
                     stan::model::index_uni((i - 1))));
        } else {
          current_statement__ = 79;
          return (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
                   stan::model::rvalue(y, "y",
                     stan::model::index_uni((i - 1))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T1__>>
  g(const int& i, const T1__& err_arg__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
    int current_statement__ = 0; 
    const auto& err = stan::math::to_ref(err_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 95;
      if (stan::math::logical_lt(i, 1)) {
        current_statement__ = 93;
        return 0.0;
      } 
      current_statement__ = 96;
      return stan::model::rvalue(err, "err", stan::model::index_uni(i));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T3__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>*>
stan::promote_args_t<T3__, stan::base_type_t<T5__>, stan::base_type_t<T6__>>
f_functor__::operator()(const int& i, const int& p, const int& q,
                        const std::vector<T3__>& y,
                        const std::vector<int>& is_missing,
                        const T5__& y_missing, const T6__& y_start,
                        std::ostream* pstream__)  const
{
  return f(i, p, q, y, is_missing, y_missing, y_start, pstream__);
}

template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T1__>>
g_functor__::operator()(const int& i, const T1__& err,
                        std::ostream* pstream__)  const
{
  return g(i, err, pstream__);
}

 class code_model final : public model_base_crtp<code_model> {

 private:
  int T;
  int p;
  int q;
  std::vector<double> y;
  std::vector<int> is_missing;
  int y_start_1dim__; 
  
 
 public:
  ~code_model() { }
  
  inline std::string model_name() const final { return "code_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  code_model(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::code_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 56;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 56;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 57;
      context__.validate_dims("data initialization","p","int",
           std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      
      
      current_statement__ = 57;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization","q","int",
           std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      
      
      current_statement__ = 58;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "q", q, 1);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("y", "T", T);
      current_statement__ = 60;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      y = std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 60;
      y = context__.vals_r("y");
      current_statement__ = 61;
      stan::math::validate_non_negative_index("is_missing", "T", T);
      current_statement__ = 62;
      context__.validate_dims("data initialization","is_missing","int",
           std::vector<size_t>{static_cast<size_t>(T)});
      is_missing = std::vector<int>(T, std::numeric_limits<int>::min());
      
      
      current_statement__ = 62;
      is_missing = context__.vals_i("is_missing");
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "is_missing",
                                            is_missing, 0);
      current_statement__ = 62;
      stan::math::check_less_or_equal(function__, "is_missing", is_missing, 1);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("phi", "p", p);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("theta", "q", q);
      current_statement__ = 65;
      y_start_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 65;
      y_start_1dim__ = (p + 1);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("y_start", "p + 1",
                                              y_start_1dim__);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("y_missing", "T", T);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("y_post_pred", "T", T);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("err_post_pred", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = p + q + 1 + y_start_1dim__ + T;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> phi =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 1;
      phi = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(-1, 1,
              lp__, p);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 2;
      theta = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(-1, 1,
                lp__, q);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_start =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(y_start_1dim__,
           DUMMY_VAR__);
      current_statement__ = 4;
      y_start = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  y_start_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 5;
      y_missing = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    T);
      {
        current_statement__ = 31;
        stan::math::validate_non_negative_index("nu", "T", T);
        Eigen::Matrix<local_scalar_t__, -1, 1> nu =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
        current_statement__ = 33;
        stan::math::validate_non_negative_index("err", "T", T);
        Eigen::Matrix<local_scalar_t__, -1, 1> err =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
        current_statement__ = 44;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 35;
          stan::model::assign(nu, 0.0,
            "assigning variable nu", stan::model::index_uni(t));
          current_statement__ = 38;
          for (int j = 1; j <= p; ++j) {
            current_statement__ = 36;
            stan::model::assign(nu,
              (stan::model::rvalue(nu, "nu", stan::model::index_uni(t)) +
                (stan::model::rvalue(phi, "phi", stan::model::index_uni(j)) *
                  f((t - j), p, q, y, is_missing, y_missing,
                    y_start, pstream__))),
              "assigning variable nu", stan::model::index_uni(t));
          }
          current_statement__ = 41;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 39;
            stan::model::assign(nu,
              (stan::model::rvalue(nu, "nu", stan::model::index_uni(t)) +
                (stan::model::rvalue(theta, "theta",
                   stan::model::index_uni(j)) * g((t - j), err, pstream__))),
              "assigning variable nu", stan::model::index_uni(t));
          }
          current_statement__ = 42;
          stan::model::assign(err,
            (f(t, p, q, y, is_missing, y_missing, y_start, pstream__) -
              stan::model::rvalue(nu, "nu", stan::model::index_uni(t))),
            "assigning variable err", stan::model::index_uni(t));
        }
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(phi, 0, 2));
        current_statement__ = 47;
        if (stan::math::logical_lt(stan::math::min(phi), -1)) {
          current_statement__ = 47;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 46;
          if (stan::math::logical_gt(stan::math::max(phi), 1)) {
            current_statement__ = 46;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 46;
            lp_accum__.add(
              -(stan::math::log_diff_exp(stan::math::normal_lcdf(1, 0, 2),
                  stan::math::normal_lcdf(-1, 0, 2)) * stan::math::size(phi)));
          }
        }
        current_statement__ = 48;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(theta, 0, 2));
        current_statement__ = 50;
        if (stan::math::logical_lt(stan::math::min(theta), -1)) {
          current_statement__ = 50;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 49;
          if (stan::math::logical_gt(stan::math::max(theta), 1)) {
            current_statement__ = 49;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 49;
            lp_accum__.add(
              -(stan::math::log_diff_exp(stan::math::normal_lcdf(1, 0, 2),
                  stan::math::normal_lcdf(-1, 0, 2)) *
                 stan::math::size(theta)));
          }
        }
        current_statement__ = 51;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 5));
        current_statement__ = 52;
        if (stan::math::logical_lt(sigma, 0)) {
          current_statement__ = 52;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 52;
          lp_accum__.add(-stan::math::cauchy_lccdf(0, 0, 5));
        }
        current_statement__ = 53;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(err, 0, sigma));
        current_statement__ = 54;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_start, 1, 1));
        current_statement__ = 55;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_missing, 1, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> phi =
         Eigen::Matrix<double, -1, 1>::Constant(p,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      phi = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(-1, 1,
              lp__, p);
      Eigen::Matrix<double, -1, 1> theta =
         Eigen::Matrix<double, -1, 1>::Constant(q,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      theta = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(-1, 1,
                lp__, q);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> y_start =
         Eigen::Matrix<double, -1, 1>::Constant(y_start_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      y_start = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  y_start_1dim__);
      Eigen::Matrix<double, -1, 1> y_missing =
         Eigen::Matrix<double, -1, 1>::Constant(T,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      y_missing = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    T);
      out__.write(phi);
      out__.write(theta);
      out__.write(sigma);
      out__.write(y_start);
      out__.write(y_missing);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> y_post_pred =
         std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> err_post_pred =
         std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      stan::model::assign(err_post_pred,
        stan::math::normal_rng(stan::math::rep_vector(0, T), sigma,
          base_rng__), "assigning variable err_post_pred");
      current_statement__ = 30;
      for (int t = 1; t <= T; ++t) {
        double mean_val = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 8;
        mean_val = 0.0;
        current_statement__ = 18;
        for (int j = 1; j <= p; ++j) {
          current_statement__ = 16;
          if (stan::math::logical_lt((t - j), 1)) {
            current_statement__ = 14;
            mean_val = (mean_val +
                         (stan::model::rvalue(phi, "phi",
                            stan::model::index_uni(j)) *
                           (stan::model::rvalue(y_start, "y_start",
                              stan::model::index_uni((((p + t) - j) + 1))) -
                             stan::model::rvalue(y_start, "y_start",
                               stan::model::index_uni(((p + t) - j))))));
          } else {
            current_statement__ = 13;
            if (stan::math::logical_eq((t - j), 1)) {
              current_statement__ = 11;
              mean_val = (mean_val +
                           (stan::model::rvalue(phi, "phi",
                              stan::model::index_uni(j)) *
                             (stan::model::rvalue(y_post_pred, "y_post_pred",
                                stan::model::index_uni((t - j))) -
                               stan::model::rvalue(y_start, "y_start",
                                 stan::model::index_uni(((p + t) - j))))));
            } else {
              current_statement__ = 9;
              mean_val = (mean_val +
                           (stan::model::rvalue(phi, "phi",
                              stan::model::index_uni(j)) *
                             (stan::model::rvalue(y_post_pred, "y_post_pred",
                                stan::model::index_uni((t - j))) -
                               stan::model::rvalue(y_post_pred,
                                 "y_post_pred",
                                 stan::model::index_uni(((t - j) - 1))))));
            }
          }
        }
        current_statement__ = 23;
        for (int j = 1; j <= q; ++j) {
          current_statement__ = 21;
          if (stan::math::logical_gt((t - j), 0)) {
            current_statement__ = 19;
            mean_val = (mean_val +
                         (stan::model::rvalue(theta, "theta",
                            stan::model::index_uni(j)) *
                           stan::model::rvalue(err_post_pred,
                             "err_post_pred",
                             stan::model::index_uni((t - j)))));
          } 
        }
        current_statement__ = 28;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 26;
          stan::model::assign(y_post_pred,
            ((stan::model::rvalue(y_start, "y_start",
                stan::model::index_uni((p + 1))) + mean_val) +
              stan::model::rvalue(err_post_pred, "err_post_pred",
                stan::model::index_uni(t))),
            "assigning variable y_post_pred", stan::model::index_uni(t));
        } else {
          current_statement__ = 24;
          stan::model::assign(y_post_pred,
            ((stan::model::rvalue(y_post_pred, "y_post_pred",
                stan::model::index_uni((t - 1))) + mean_val) +
              stan::model::rvalue(err_post_pred, "err_post_pred",
                stan::model::index_uni(t))),
            "assigning variable y_post_pred", stan::model::index_uni(t));
        }
      }
      out__.write(y_post_pred);
      out__.write(err_post_pred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> phi =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        stan::model::assign(phi, in__.read<local_scalar_t__>(),
          "assigning variable phi", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(-1, 1, phi);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        stan::model::assign(theta, in__.read<local_scalar_t__>(),
          "assigning variable theta", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(-1, 1, theta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_start =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(y_start_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= y_start_1dim__; ++sym1__) {
        stan::model::assign(y_start, in__.read<local_scalar_t__>(),
          "assigning variable y_start", stan::model::index_uni(sym1__));
      }
      out__.write(y_start);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_missing =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(T, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        stan::model::assign(y_missing, in__.read<local_scalar_t__>(),
          "assigning variable y_missing", stan::model::index_uni(sym1__));
      }
      out__.write(y_missing);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"phi", "theta", "sigma", "y_start",
      "y_missing", "y_post_pred", "err_post_pred"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(p)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(q)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(y_start_1dim__)},
      std::vector<size_t>{static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(T)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= y_start_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_start" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "err_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= y_start_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_start" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "err_post_pred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_start\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_start_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"y_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"err_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_start\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(y_start_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"y_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"err_post_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((p + q) + 1) + y_start_1dim__) + T);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (T + T);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((p + q) + 1) + y_start_1dim__) + T);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (T + T);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"phi", "theta", "sigma",
      "y_start", "y_missing"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{p, q, 
       1, y_start_1dim__, T};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = code_model_namespace::code_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return code_model_namespace::profiles__;
}

#endif


