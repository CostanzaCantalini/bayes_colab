vec <- matrix(0,49,3)
for (ii in 1:length(levels(stazione)))
{staz <- data_2018[which(Stazione==levels(stazione)[ii]),]$VALORE
fit <- auto.arima(staz,stepwise=FALSE,approximation=FALSE)
vec[ii,]<-c(length(fit$model$phi),length(fit$model$Delta),length(fit$model$theta))
summary(fit)}
vec
for (ii in 1:49)
{vec[ii,]<-as.factor(vec[ii,])}
vec
levels(vec)
vec
vec <- matrix(0,49,3)
for (ii in 1:length(levels(stazione)))
{staz <- data_2018[which(Stazione==levels(stazione)[ii]),]$VALORE
fit <- auto.arima(staz,stepwise=FALSE,approximation=FALSE)
vec[ii,]<-c(length(fit$model$phi),length(fit$model$Delta),length(fit$model$theta))
summary(fit)}
vwc
vec
vec<-as.data.frame(vec)
vec
distinct(vec)
group_by(vec)
vec
table(distinct(vec))
table(vec)
table(vec)
vec
table(distinct(vec))
group_by(vec)
sum(vec[ii,]==distinct(vec)[ii])
for (ii in 1:49)
sum(vec[ii,]==distinct(vec)[ii])
vec[ii,]
distinct(vec)[ii]
sum(vec[ii,]==distinct(vec)[ii,])
for (ii in 1:49)
sum(vec[ii,]==distinct(vec)[ii,])
tab<-rep(0,10)
{tab[ii]<-sum(vec[ii,]==distinct(vec)[ii,])}
tab
tab<-rep(0,10)
for (ii in 1:49)
{tab[ii]<-sum(vec[ii,]==distinct(vec)[ii,])}
tab
tab<-rep(0,10)
for (ii in 1:49)
{ for (jj in 1:10)
{tab[jj]<-sum(vec[ii,]==distinct(vec)[jj,])}}
tab
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-sum(vec[ii,]==distinct(vec)[jj,])}}
tab
vec[ii,]
distinct(vec)[jj,])
distinct(vec)[jj,]
(1,2,3)==(4,5,6)
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-sum(vec[ii,]-distinct(vec)[jj,]==0)}}
tab
vec
distinct(vec)
vec[ii,]-distinct(vec)[jj,]==0
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
tab
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-sum(all(vec[ii,]==distinct(vec)[jj,])}}
{tab[jj]<-sum(all(vec[ii,]==distinct(vec)[jj,])}
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
tab
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
tab
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
tab[jj]<-sum(all(vec[ii,]==distinct(vec)[jj,]))}
tab
tab
ff
tab<-rep(0,10)
getqi8freldwunt08xf23w
cjmiprefwiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
freeny
c(00)
sop
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
tab[jj]<-sum(all(vec[ii,]==distinct(vec)[jj,]))}
vec<-as.data.frame(vec)
distinct(vec)
library(dplyr)
vec<-as.data.frame(vec)
distinct(vec)
group_by(vec)
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
tab[jj]<-sum(all(vec[ii,]==distinct(vec)[jj,]))}
tab
all(vec[ii,]==distinct(vec)[jj,])
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-sum(all(vec[ii,]==distinct(vec)[jj,]))}}
tab
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-count(all(vec[ii,]==distinct(vec)[jj,]))}}
tab
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-tab[jj]+count(all(vec[ii,]==distinct(vec)[jj,]))}}
tab<-rep(0,10)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-tab[jj]+all(vec[ii,]==distinct(vec)[jj,])}}
tab
sum(tab)
distinct(vec)
vec
which(vec==distinct(vec)[2])
which(vec==distinct(vec)[2])
group_by(vec)
distinct(vec)
tab
which(all(vec==distinct(vec)[2]))
for (ii in 1:49)
which(all(vec[ii,]==distinct(vec)[2,]))
for (ii in 1:49)
{which(all(vec[ii,]==distinct(vec)[2,]))}
tab<-rep(0,10)
vec2<-rep(0,49)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-tab[jj]+all(vec[ii,]==distinct(vec)[jj,])
if (all(vec[ii,]==distinct(vec)[jj,]))
vec2[ii]<-jj}}
tab
vec2
destinct(vec)
distinct(vec)
vec
vec2
vec2 <-as.data.frame(vec2)
vec2
type
area
vec2
col=vec2
plot(data_2018$date,data_2018$VALORE,xlab='Days',ylab='Values') #useless
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values') #boxplot for stations
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values', col=col) #boxplot for stations
col
install.packages("RColorBrewer")
col=vec2
plot1 =  ggplot(urban_data, aes(x=date, y=VALORE), col=col) +
geom_line() +
xlab("urban")
brewer.pal(n = 10)
library(RColorBrewer)
brewer.pal(n = 10)
col=brewer.pal(n = 10)
col=brewer.pal(10)
vec2
library(RColorBrewer)
col=vec2
plot1 =  ggplot(urban_data, aes(x=date, y=VALORE), col=col) +
geom_line() +
xlab("urban")
library(ggplot)
plot1 =  ggplot(urban_data, aes(x=date, y=VALORE), col=col) +
geom_line() +
xlab("urban")
library(gg)
vec2
tab
vec2
distinct(vec)
library(readxl)
Polveri_Emilia <- read_excel("dati_polveri/Polveri Emilia.xlsx")
View(Polveri_Emilia)
library(readxl)
data<-Polveri_Emilia
attach(data)
anno<-factor(Anno)
data_2018<- data[which(anno=='2018'),]
data_2018<- data_2018[,-2]
detach(data)
attach(data_2018)
#replace 0 values with 1
table(data_2018$VALORE)
data_2018$VALORE[data_2018$VALORE == 0] <- 1
data_2018$VALORE<-log(data_2018$VALORE)
hist(data_2018$VALORE)
stazione<-factor(Stazione)
data_2018$date <- as.Date(with(data_2018, paste(Anno, data_2018$Mese, data_2018$Giorno,sep="-")), "%Y-%m-%d")
data_2018$date
x11()
plot(data_2018$date,data_2018$VALORE,xlab='Days',ylab='Values') #useless
# count of repeated values!!
v<-which(table(data_2018$DATA_FINE)>1)
length(which(table(v)>1))
library(ggplot2)
library(dplyr)
# Most basic time series plot
p <- ggplot(data.frame(
day = data_2018$date,
value = data_2018$VALORE
), aes(x=day, y=value)) +
geom_line() +
xlab("")
p
type<-factor(data_2018$TipoStazione)
area<- factor(data_2018$TipoArea)
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values') #boxplot for stations
boxplot(data_2018$VALORE) #boxplot of all values
# boxplot(data_2018$VALORE) #boxplot of all values
boxplot(data_2018$VALORE~type) #boxplot on type
boxplot(data_2018$VALORE~area) #boxplot on area
# boxplot(data_2018$VALORE) #boxplot of all values
boxplot(data_2018$VALORE~type) #boxplot on type
boxplot(data_2018$VALORE~area) #boxplot on area
library(directlabels)
library(ggplot2)
is_weekend <- function(n) {
require(lubridate)
(ifelse(wday(as.Date(n)) == 1, T, F) | ifelse(wday(as.Date(n)) == 7, T, F))
}
data_2018$weekend<-is_weekend(data_2018$date)
install.packages("gridExtra")
urban_data<- data_2018[which(area=='Urbano'),]
suburban_data<-  data_2018[which(area=='Suburbano'),]
rural_data<-  data_2018[which(area=='Rurale'),]
x11()
library(gridExtra)
plot1 =  ggplot(urban_data, aes(x=date, y=VALORE)) +
geom_line() +
xlab("urban")
plot2 = ggplot(suburban_data, aes(x=date, y=VALORE)) +
geom_line() +
xlab("suburban")
plot3 = ggplot(rural_data, aes(x=date, y=VALORE)) +
geom_line() +
xlab("rural")
grid.arrange(plot1, plot2, plot3, ncol=3, nrow = 1)
ggplot(data_2018, aes(date, VALORE, group = area,color=area)) +
geom_line() +
#geom_point() +
geom_dl(aes(label = area),
method = list(dl.combine("first.points", "last.points"), cex = 0.8))
scale_color_gradient2()
ggplot(data_2018, aes(date, VALORE, group = type,color=type)) +
geom_line() +
#geom_point() +
geom_dl(aes(label = type),
method = list(dl.combine("first.points", "last.points"), cex = 0.8))
scale_color_gradient2()
staz_1<-data_2018[which(stazione==levels(stazione)[1]),]
staz_1$TipoArea
plota=ggplot(staz_1, aes(x=date, y=VALORE)) +
geom_line() +
xlab("")
# stazione 2
staz_2<-data_2018[which(stazione==levels(stazione)[2]),]
staz_2$TipoArea
plotb=ggplot(staz_2, aes(x=date, y=VALORE)) +
geom_line() +
xlab("")
grid.arrange(plota, plotb, ncol=2, nrow = 1)
fit <- auto.arima(staz_1$VALORE,stepwise=FALSE,approximation=FALSE)
summary(fit)
library(forecast)
fit <- auto.arima(staz_1$VALORE,stepwise=FALSE,approximation=FALSE)
summary(fit)
# Next 5 forecasted values
forecast(fit, 5)
# plotting the graph with next
# 5 weekly forecasted values
plot(forecast(fit, 5), xlab ="Days",
ylab ="PM10 values",
main ="Badia", col.main ="darkgreen")
# Next 5 forecasted values
forecast(fit, 30)
# plotting the graph with next
# 5 weekly forecasted values
plot(forecast(fit, 30), xlab ="Days",
ylab ="PM10 values",      main ="Badia", col.main ="darkgreen")
# Plot station 1 vs station 2
ggplot() +
geom_line(data = staz_1, aes(x = date, y = VALORE), color = "red") +
geom_line(data = staz_2, aes(x = date, y = VALORE), color = "blue") +
xlab('days') +
ylab('PM10')
staz_3<-data_2018[which(stazione==levels(stazione)[3]),]
ggplot(staz_3, aes(x=date, y=VALORE)) +
geom_line() +
xlab("")
ggplot() +
geom_line(data = staz_1, aes(x = date, y = VALORE), color = "red") +
geom_line(data = staz_3, aes(x = date, y = VALORE), color = "blue") +
xlab('days') +
ylab('PM10')
staz_3$type
starz_3$area
staz_3$TipoArea
library(mice)
library(urca)
summary(ur.kpss(staz_1$VALORE)) #stationariety test
ndiffs(staz_1$VALORE) #seems stationary, number of differentiations needed
summary(ur.kpss(staz_2$VALORE))
ndiffs(staz_2$VALORE) #not stationary 1 diff
summary(ur.kpss(staz_3$VALORE))
ndiffs(staz_3$VALORE) #not stationary  1 diff
ggtsdisplay(staz_1$VALORE,lag.max = 364)
#try some arima fits
fit1 <- Arima(staz_1$VALORE, order=c(3,1,1))
summary(fit1)
#try some arima fits
fit1 <- Arima(staz_1$VALORE, order=c(3,1,1))
summary(fit1)
fit2 <- Arima(staz_1$VALORE, order=c(3,0,2))
summary(fit2) #better error than auto arima but more unstable
fit3 <- auto.arima(staz_1$VALORE, stepwise=FALSE,approximation=FALSE)
summary(fit3)
autoplot(forecast(fit3))
autoplot(fit3)
autoplot(fit2)
fit2 <- Arima(staz_1$VALORE, order=c(3,0,2))
summary(fit2) #better error than auto arima but more unstable
fit3 <- auto.arima(staz_1$VALORE, stepwise=FALSE,approximation=FALSE)
summary(fit3)
fit3 <- auto.arima(staz_1$VALORE, stepwise=FALSE,approximation=FALSE, trace=TRUE)
summary(fit3)
matplot(cbind(staz_1$VALORE,fitted(fit3)),type='l')
x11()
matplot(cbind(staz_1$VALORE,fitted(fit2)),type='l')
checkresiduals(fit2)
autoplot(forecast(fit2))
autoplot(fit2)
checkresiduals(fit3)
autoplot(forecast(fit3))
autoplot(fit3)
ggtsdisplay(staz_3$VALORE)
ggtsdisplay(diff(staz_3$VALORE))
checkresiduals(fit2)
checkresiduals(fit3)
ggtsdisplay(staz_3$VALORE)
ggtsdisplay(diff(staz_3$VALORE))
fit4 <- Arima(diff(staz_3$VALORE), order=c(3,1,1))
summary(ur.kpss(staz_3$VALORE)) #stationariety test
ndiffs(staz_3$VALORE)
summary(ur.kpss(diff(staz_3)$VALORE)) #stationariety test
summary(ur.kpss(diff(staz_3$VALORE))) #stationariety test
ndiffs(diff(staz_3$VALORE))
ggtsdisplay(diff(staz_3$VALORE), lag=90)
ggtsdisplay(diff(staz_3$VALORE), lag=364)
levels(stazione)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
vec <- matrix(0,49,3)
for (ii in 1:length(levels(stazione)))
{staz <- data_2018[which(Stazione==levels(stazione)[ii]),]$VALORE
fit <- auto.arima(staz,stepwise=FALSE,approximation=FALSE)
vec[ii,]<-c(length(fit$model$phi),length(fit$model$Delta),length(fit$model$theta))
summary(fit)}
library(dplyr)
vec<-as.data.frame(vec)
distinct(vec)
group_by(vec)
tab<-rep(0,10)
vec2<-rep(0,49)
for (jj in 1:10)
{ for (ii in 1:49)
{tab[jj]<-tab[jj]+all(vec[ii,]==distinct(vec)[jj,])
if (all(vec[ii,]==distinct(vec)[jj,]))
vec2[ii]<-jj}}
tab
vec2
distinct(vec)
#incidence of weekends on PM values
data_2018$Month <- as.factor(data_2018$Month)
ggplot(staz_1, aes(x=date, y=VALORE, color=as.factor(weekend))) +
geom_point(shape=16, size=1.5) +
stat_smooth(method = "lm", col = "black")+
labs(x = "days", y = "PM10")
ggplot(staz_2, aes(x=date, y=VALORE, color=as.factor(weekend))) +
geom_point(shape=16, size=1.5) +
stat_smooth(method = "lm", col = "black")+
labs(x = "days", y = "PM10")
vec2
distinct(vec)
tab
type<-factor(data_2018$TipoStazione)
area<- factor(data_2018$TipoArea)
# Prepare a vector of colors with specific color for Urbano, Suburbano e Rurale
myColors <- ifelse(levels(data_2018$TipoStazione)=="Urbano" , rgb(0.1,0.1,0.7,0.5) ,
ifelse(levels(data_2018$TipoStazione)=="Suburbano", rgb(0.8,0.1,0.3,0.6),
ifelse( levels(data_2018$TipoStazione)=="Rurale" , rgb(0.5,0.5,0.5,0.5) ,
"grey90" ) ) )
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values', col=myColors) #boxplot for stations
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:length(dat),
y = par("usr")[3] - 0.45,
labels = names(dat),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1)
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values') #boxplot for stations
# boxplot(data_2018$VALORE) #boxplot of all values
boxplot(data_2018$VALORE~type) #boxplot on type
boxplot(data_2018$VALORE~area) #boxplot on area
# Prepare a vector of colors with specific color for Urbano, Suburbano e Rurale
myColors <- ifelse(levels(data_2018$TipoStazione)=="Urbano" , rgb(0.1,0.1,0.7,0.5) ,
ifelse(levels(data_2018$TipoStazione)=="Suburbano", rgb(0.8,0.1,0.3,0.6),
ifelse( levels(data_2018$TipoStazione)=="Rurale" , rgb(0.5,0.5,0.5,0.5) ,
"grey90" ) ) )
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values', col=myColors) #boxplot for stations
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:length(dat),
y = par("usr")[3] - 0.45,
labels = names(dat),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1)
text(x = 1:49,
y = par("usr")[3] - 0.45,
labels = names(dat),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1)
text(x = 1:49,
y = par("usr")[3] - 0.45,
labels = stazione,
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1)
# Prepare a vector of colors with specific color for Urbano, Suburbano e Rurale
myColors <- ifelse(levels(data_2018$TipoStazione)=="Urbano" , rgb(0.1,0.1,0.7,0.5) ,
ifelse(levels(data_2018$TipoStazione)=="Suburbano", rgb(0.8,0.1,0.3,0.6),
ifelse( levels(data_2018$TipoStazione)=="Rurale" , rgb(0.5,0.5,0.5,0.5) ,
"grey90" ) ) )
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values', col=myColors) #boxplot for stations
text(x = 1:49,
y = par("usr")[3] - 0.45,
labels = stazione,
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1)
# Prepare a vector of colors with specific color for Urbano, Suburbano e Rurale
myColors <- ifelse(levels(data_2018$TipoStazione)=="Urbano" , rgb(0.1,0.1,0.7,0.5) ,
ifelse(levels(data_2018$TipoStazione)=="Suburbano", rgb(0.8,0.1,0.3,0.6),
ifelse( levels(data_2018$TipoStazione)=="Rurale" , rgb(0.5,0.5,0.5,0.5) ,
"grey90" ) ) )
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values', col=myColors) #boxplot for stations
text(x = 1:49,
y = par("usr")[3] - 0.45,
labels = stazione,
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 90,
adj=1)
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values', col=myColors) #boxplot for stations
text(x = 1:49,
y = par("usr")[3] - 0.45,
labels = stazione,
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
adj=1)
boxplot(data_2018$VALORE~stazione,data_2018,ylab = 'values', col=myColors) #boxplot for stations
text(x = 1:49,
y = par("usr")[3] - 0.45,
labels = stazione,
xpd = NA,
## Rotate the labels by 35 degrees.
cex = 1,
srt = 35,
adj=1)
data_2018$TipoStazione
View(data_2018)
View(data_2018)
View(data_2018)
View(data_2018)
stazione
