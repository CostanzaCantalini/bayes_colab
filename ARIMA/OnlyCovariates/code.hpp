
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace code_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 186> locations_array__ = 
{" (found before start of program)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 50, column 2 to column 20)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 52, column 2 to column 21)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 53, column 2 to column 35)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 56, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 57, column 2 to column 16)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 58, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 61, column 2 to column 11)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 62, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 64, column 2 to column 14)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 66, column 2 to column 30)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 67, column 2 to column 39)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 73, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 78, column 2 to column 48)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 86, column 2 to column 36)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 87, column 2 to column 47)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 99, column 2 to column 26)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 106, column 2 to column 69)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 112, column 2 to column 37)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 113, column 2 to column 18)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 75, column 4 to column 80)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 74, column 17 to line 76, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 74, column 2 to line 76, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 89, column 4 to column 61)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 88, column 17 to line 90, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 88, column 2 to line 90, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 92, column 4 to column 62)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 91, column 17 to line 93, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 91, column 2 to line 93, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 100, column 2 to column 48)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 101, column 2 to column 34)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 103, column 4 to column 39)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 102, column 28 to line 104, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 102, column 2 to line 104, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 105, column 2 to column 82)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 117, column 4 to column 56)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 116, column 17 to line 118, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 116, column 2 to line 118, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 121, column 2 to column 33)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 125, column 1 to column 39)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 124, column 21 to line 126, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 124, column 6 to line 126, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 123, column 19 to line 127, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 123, column 4 to line 127, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 122, column 17 to line 128, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 122, column 2 to line 128, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 165, column 2 to column 34)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 166, column 2 to column 28)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 168, column 4 to column 73)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 167, column 17 to line 169, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 167, column 2 to line 169, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 170, column 2 to column 56)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 174, column 15 to column 16)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 174, column 4 to column 49)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 177, column 6 to column 80)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 176, column 19 to line 178, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 176, column 4 to line 178, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 182, column 1 to column 50)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 181, column 25 to line 183, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 181, column 6 to line 183, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 180, column 19 to line 184, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 180, column 4 to line 184, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 186, column 4 to column 86)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 172, column 27 to line 188, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 172, column 2 to line 188, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 191, column 2 to column 89)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 193, column 2 to column 24)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 194, column 2 to column 23)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 195, column 2 to column 26)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 196, column 2 to column 39)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 197, column 2 to column 35)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 198, column 2 to column 36)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 200, column 4 to column 44)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 201, column 4 to column 42)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 202, column 4 to column 54)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 203, column 4 to column 38)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 205, column 6 to column 70)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 204, column 19 to line 206, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 204, column 4 to line 206, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 207, column 4 to column 66)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 208, column 4 to column 59)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 199, column 17 to line 209, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 199, column 2 to line 209, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 213, column 2 to column 35)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 214, column 2 to column 20)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 218, column 1 to column 55)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 219, column 1 to column 16)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 217, column 32 to line 220, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 217, column 6 to line 220, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 216, column 19 to line 221, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 216, column 4 to line 221, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 215, column 17 to line 222, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 215, column 2 to line 222, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 225, column 2 to column 71)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 226, column 2 to column 69)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 138, column 4 to column 70)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 137, column 17 to line 139, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 137, column 2 to line 139, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 140, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 142, column 2 to column 40)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 143, column 2 to column 25)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 144, column 2 to column 28)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 146, column 2 to column 39)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 147, column 2 to column 37)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 149, column 2 to column 34)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 150, column 2 to column 37)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 152, column 2 to column 18)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 153, column 2 to column 22)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 157, column 4 to column 34)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 156, column 17 to line 158, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 156, column 2 to line 158, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 4, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 5, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 6, column 2 to column 19)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 8, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 9, column 2 to column 17)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 11, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 11, column 11 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 11, column 2 to column 16)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 13, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 13, column 11 to column 14)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 13, column 2 to column 18)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 15, column 26 to column 27)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 15, column 28 to column 29)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 15, column 2 to column 42)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 17, column 2 to column 28)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 23, column 8 to column 11)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 23, column 2 to column 19)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 24, column 8 to column 20)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 24, column 2 to column 45)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 26, column 2 to column 32)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 27, column 2 to column 32)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 29, column 8 to column 20)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 29, column 2 to column 50)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 31, column 2 to column 16)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 35, column 1 to column 19)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 36, column 1 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 34, column 33 to line 37, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 34, column 6 to line 37, column 7)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 33, column 25 to line 38, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 33, column 4 to line 38, column 5)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 32, column 17 to line 39, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 32, column 2 to line 39, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 41, column 13 to column 14)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 41, column 2 to column 31)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 43, column 4 to column 39)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 42, column 17 to line 44, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 42, column 2 to line 44, column 3)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 50, column 9 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 52, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 53, column 8 to column 9)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 53, column 22 to column 23)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 62, column 9 to column 21)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 64, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 66, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 67, column 18 to column 19)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 73, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 73, column 11 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 78, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 78, column 11 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 86, column 27 to column 28)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 87, column 8 to column 9)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 87, column 40 to column 41)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 99, column 9 to column 14)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 99, column 15 to column 16)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 106, column 9 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 106, column 14 to column 15)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 112, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 112, column 11 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 113, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 113, column 11 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 165, column 9 to column 14)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 165, column 15 to column 16)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 166, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 166, column 11 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 191, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 191, column 11 to column 12)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 193, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 194, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 195, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 196, column 9 to column 10)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 197, column 8 to column 9)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 198, column 8 to column 9)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 213, column 9 to column 25)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 225, column 8 to column 20)",
 " (in '/home/br1/PythonProjects/PythonStats/ARIMA_last_computation/OnlyCovariates/code.stan', line 226, column 8 to column 20)"};




class code_model final : public model_base_crtp<code_model> {

 private:
  int T;
  int S;
  int reg;
  int p;
  int q;
  Eigen::Matrix<double, -1, -1> y_data__;
  Eigen::Matrix<double, -1, -1> X_data__;
  Eigen::Matrix<double, -1, -1> is_missing_data__;
  int missing_size;
  std::vector<int> u;
  std::vector<int> v;
  std::vector<int> u_mine;
  int index;
  Eigen::Matrix<double, 1, -1> media_stazione_data__;
  int right_y_1dim__;
  int D_1dim__;
  int y_post_pred_aux_1dim__;
  int log_lik_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> y{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> is_missing{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> media_stazione{nullptr, 0};
 
 public:
  ~code_model() { }
  
  inline std::string model_name() const final { return "code_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = --O1"};
  }
  
  
  code_model(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::code_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 111;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 111;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 112;
      context__.validate_dims("data initialization","S","int",
           std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      
      
      current_statement__ = 112;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "S", S, 1);
      current_statement__ = 113;
      context__.validate_dims("data initialization","reg","int",
           std::vector<size_t>{});
      reg = std::numeric_limits<int>::min();
      
      
      current_statement__ = 113;
      reg = context__.vals_i("reg")[(1 - 1)];
      current_statement__ = 113;
      stan::math::check_greater_or_equal(function__, "reg", reg, 1);
      current_statement__ = 114;
      context__.validate_dims("data initialization","p","int",
           std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      
      
      current_statement__ = 114;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 115;
      context__.validate_dims("data initialization","q","int",
           std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      
      
      current_statement__ = 115;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "q", q, 1);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("y", "T", T);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("y", "S", S);
      current_statement__ = 118;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(T),
            static_cast<size_t>(S)});
      y_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(T, S,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, -1>>(y_data__.data(), T, S);
        
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 118;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 118;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 118;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 118;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 119;
      stan::math::validate_non_negative_index("X", "S", S);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("X", "reg", reg);
      current_statement__ = 121;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(S),
            static_cast<size_t>(reg)});
      X_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(S, reg,
          std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_data__.data(), S, reg);
        
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 121;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= reg; ++sym1__) {
          current_statement__ = 121;
          for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
            current_statement__ = 121;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 121;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 122;
      stan::math::validate_non_negative_index("is_missing", "T", T);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("is_missing", "S", S);
      current_statement__ = 124;
      context__.validate_dims("data initialization","is_missing","double",
           std::vector<size_t>{static_cast<size_t>(T),
            static_cast<size_t>(S)});
      is_missing_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(T, S,
          std::numeric_limits<double>::quiet_NaN());
      new (&is_missing) Eigen::Map<Eigen::Matrix<double, -1, -1>>(is_missing_data__.data(), T, S);
        
      
      {
        std::vector<local_scalar_t__> is_missing_flat__;
        current_statement__ = 124;
        is_missing_flat__ = context__.vals_r("is_missing");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 124;
            stan::model::assign(is_missing, is_missing_flat__[(pos__ - 1)],
              "assigning variable is_missing", stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
            current_statement__ = 124;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 124;
      stan::math::check_greater_or_equal(function__, "is_missing",
                                            is_missing, 0);
      current_statement__ = 124;
      stan::math::check_less_or_equal(function__, "is_missing", is_missing, 1);
      current_statement__ = 125;
      context__.validate_dims("data initialization","missing_size","int",
           std::vector<size_t>{});
      missing_size = std::numeric_limits<int>::min();
      
      
      current_statement__ = 125;
      missing_size = context__.vals_i("missing_size")[(1 - 1)];
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "missing_size",
                                            missing_size, 0);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("u", "T + 1", (T + 1));
      current_statement__ = 127;
      u = std::vector<int>((T + 1), std::numeric_limits<int>::min());
      
      
      current_statement__ = 128;
      stan::math::validate_non_negative_index("v", "missing_size",
                                              missing_size);
      current_statement__ = 129;
      v = std::vector<int>(missing_size, std::numeric_limits<int>::min());
      
      
      current_statement__ = 130;
      stan::model::assign(u, stan::math::csr_extract_u(is_missing),
        "assigning variable u");
      current_statement__ = 131;
      stan::model::assign(v, stan::math::csr_extract_v(is_missing),
        "assigning variable v");
      current_statement__ = 132;
      stan::math::validate_non_negative_index("u_mine", "missing_size",
                                              missing_size);
      current_statement__ = 133;
      u_mine = 
        std::vector<int>(missing_size, std::numeric_limits<int>::min());
      
      
      current_statement__ = 134;
      index = std::numeric_limits<int>::min();
      
      
      current_statement__ = 134;
      index = 1;
      current_statement__ = 142;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 140;
        if (stan::math::logical_gt(
              (stan::model::rvalue(u, "u", stan::model::index_uni((t + 1))) -
                stan::model::rvalue(u, "u", stan::model::index_uni(t))), 0)) {
          current_statement__ = 138;
          for (int j = 1;
               j <= (stan::model::rvalue(u, "u",
                       stan::model::index_uni((t + 1))) -
                      stan::model::rvalue(u, "u", stan::model::index_uni(t)));
               ++j) {
            current_statement__ = 135;
            stan::model::assign(u_mine, t,
              "assigning variable u_mine", stan::model::index_uni(index));
            current_statement__ = 136;
            index = (index + 1);
          }
        } 
      }
      current_statement__ = 143;
      stan::math::validate_non_negative_index("media_stazione", "S", S);
      current_statement__ = 144;
      media_stazione_data__ = 
        Eigen::Matrix<double, 1, -1>::Constant(S,
          std::numeric_limits<double>::quiet_NaN());
      new (&media_stazione) Eigen::Map<Eigen::Matrix<double, 1, -1>>(media_stazione_data__.data(), S);
        
      
      current_statement__ = 147;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 145;
        stan::model::assign(media_stazione,
          stan::math::mean(
            stan::model::rvalue(y, "y",
              stan::model::index_min_max(1, T), stan::model::index_uni(s))),
          "assigning variable media_stazione", stan::model::index_uni(s));
      }
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "v", v, 1);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "v", v, S);
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "u_mine", u_mine, 1);
      current_statement__ = 133;
      stan::math::check_less_or_equal(function__, "u_mine", u_mine, T);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("betas", "reg", reg);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("gamma_th", "q", q);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("gamma_phi", "p", p);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("gamma_phi", "S", S);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("w", "missing_size",
                                              missing_size);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("c", "S", S);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("hyper_gamma_phi_m", "p", p);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("hyper_gamma_phi_s", "p", p);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("cos_of_day", "T", T);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("cos_of_day", "S", S);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("regres", "T", T);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("regres", "S", S);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("theta", "q", q);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("phi", "p", p);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("phi", "S", S);
      current_statement__ = 163;
      right_y_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 163;
      right_y_1dim__ = ((T + p) + 1);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("right_y", "T + p + 1",
                                              right_y_1dim__);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("right_y", "S", S);
      current_statement__ = 165;
      D_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 165;
      D_1dim__ = (T + p);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("D", "T + p", D_1dim__);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("D", "S", S);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("nu", "T", T);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("nu", "S", S);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("err", "T", T);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("err", "S", S);
      current_statement__ = 171;
      y_post_pred_aux_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 171;
      y_post_pred_aux_1dim__ = ((T + p) + 1);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("y_post_pred_aux", "T + p + 1",
                                              y_post_pred_aux_1dim__);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("y_post_pred_aux", "S", S);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("err_post_pred", "T", T);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("err_post_pred", "S", S);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("y_post_pred", "T", T);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("y_post_pred", "S", S);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("annual_mean", "S", S);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("annual_max", "S", S);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("annual_median", "S", S);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("annual_days_over_threshold",
                                              "S", S);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("is_over_daily_limit", "S", S);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("is_over_annual_limit", "S", S);
      current_statement__ = 183;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 183;
      log_lik_1dim__ = ((T * S) - missing_size);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("log_lik",
                                              "T * S - missing_size",
                                              log_lik_1dim__);
      current_statement__ = 184;
      stan::math::validate_non_negative_index("missing_index_time",
                                              "missing_size", missing_size);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("missing_index_station",
                                              "missing_size", missing_size);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = reg + q + (p * S) + 1 + 1 + 1 + 1 + missing_size + 
      S + p + p;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> betas;
      current_statement__ = 1;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(reg);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_th;
      current_statement__ = 2;
      gamma_th = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   q);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> gamma_phi;
      current_statement__ = 3;
      gamma_phi = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(p,
                    S);
      local_scalar_t__ sigma;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ mh_sigma;
      current_statement__ = 5;
      mh_sigma = in__.template read<local_scalar_t__>();
      local_scalar_t__ sh_sigma;
      current_statement__ = 6;
      sh_sigma = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      local_scalar_t__ y_0;
      current_statement__ = 7;
      y_0 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> w;
      current_statement__ = 8;
      w = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            missing_size);
      Eigen::Matrix<local_scalar_t__, -1, 1> c;
      current_statement__ = 9;
      c = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(S);
      Eigen::Matrix<local_scalar_t__, -1, 1> hyper_gamma_phi_m;
      current_statement__ = 10;
      hyper_gamma_phi_m = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(p);
      Eigen::Matrix<local_scalar_t__, -1, 1> hyper_gamma_phi_s;
      current_statement__ = 11;
      hyper_gamma_phi_s = in__.template read_constrain_lb<
                            Eigen::Matrix<local_scalar_t__, -1, 1>, 
                            jacobian__>(0, lp__, p);
      Eigen::Matrix<local_scalar_t__, -1, -1> cos_of_day =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(T, S, DUMMY_VAR__);
      current_statement__ = 22;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        stan::model::assign(cos_of_day,
          stan::math::multiply(
            stan::model::rvalue(c, "c", stan::model::index_uni(s)),
            stan::math::cos(
              stan::math::divide(
                stan::math::multiply((2 * stan::math::pi()),
                  stan::math::cumulative_sum(stan::math::rep_vector(1, T))),
                365))),
          "assigning variable cos_of_day", stan::model::index_omni(),
                                             stan::model::index_uni(s));
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> regres;
      current_statement__ = 13;
      stan::model::assign(regres,
        stan::math::rep_matrix(
          stan::math::transpose(stan::math::multiply(X, betas)), T),
        "assigning variable regres");
      Eigen::Matrix<local_scalar_t__, -1, 1> theta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> phi =
         std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(p, 
           Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(S, DUMMY_VAR__));
      current_statement__ = 25;
      for (int j = 1; j <= q; ++j) {
        current_statement__ = 23;
        stan::model::assign(theta,
          (stan::math::expm1(
             stan::model::rvalue(gamma_th, "gamma_th",
               stan::model::index_uni(j))) /
            (stan::math::exp(
               stan::model::rvalue(gamma_th, "gamma_th",
                 stan::model::index_uni(j))) + 1)),
          "assigning variable theta", stan::model::index_uni(j));
      }
      current_statement__ = 28;
      for (int j = 1; j <= p; ++j) {
        current_statement__ = 26;
        stan::model::assign(phi,
          stan::math::elt_divide(
            stan::math::expm1(
              stan::model::rvalue(gamma_phi, "gamma_phi",
                stan::model::index_uni(j))),
            stan::math::add(
              stan::math::exp(
                stan::model::rvalue(gamma_phi, "gamma_phi",
                  stan::model::index_uni(j))), 1)),
          "assigning variable phi", stan::model::index_uni(j));
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> right_y =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(right_y_1dim__, S,
           DUMMY_VAR__);
      current_statement__ = 29;
      stan::model::assign(right_y, stan::math::rep_matrix(y_0, (p + 1), S),
        "assigning variable right_y", stan::model::index_min_max(1, (p + 1)),
                                        stan::model::index_min_max(1, S));
      current_statement__ = 30;
      stan::model::assign(right_y, y,
        "assigning variable right_y", stan::model::index_min_max((p + 2), 
                                        ((T + p) + 1)),
                                        stan::model::index_min_max(1, S));
      current_statement__ = 33;
      for (int k = 1; k <= missing_size; ++k) {
        current_statement__ = 31;
        stan::model::assign(right_y,
          stan::model::rvalue(w, "w", stan::model::index_uni(k)),
          "assigning variable right_y", stan::model::index_uni(((p + 1) +
                                                                 stan::model::rvalue(
                                                                   u_mine,
                                                                   "u_mine",
                                                                   stan::model::index_uni(k)))),
                                          stan::model::index_uni(stan::model::rvalue(
                                                                   v, "v",
                                                                   stan::model::index_uni(k))));
      }
      current_statement__ = 34;
      stan::model::assign(right_y,
        stan::math::subtract(
          stan::math::subtract(
            stan::model::deep_copy(
              stan::model::rvalue(right_y, "right_y",
                stan::model::index_min_max((p + 2), ((T + p) + 1)),
                  stan::model::index_min_max(1, S))), cos_of_day), regres),
        "assigning variable right_y", stan::model::index_min_max((p + 2), 
                                        ((T + p) + 1)),
                                        stan::model::index_min_max(1, S));
      Eigen::Matrix<local_scalar_t__, -1, -1> D;
      current_statement__ = 17;
      stan::model::assign(D,
        stan::math::subtract(
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(2, ((T + p) + 1)),
              stan::model::index_min_max(1, S)),
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(1, (T + p)),
              stan::model::index_min_max(1, S))), "assigning variable D");
      stan::conditional_var_value_t<local_scalar_t__, 
        Eigen::Matrix<local_scalar_t__, -1, -1>> nu;
      current_statement__ = 18;
      stan::model::assign(nu, stan::math::rep_matrix(0, T, S),
        "assigning variable nu");
      stan::conditional_var_value_t<local_scalar_t__, 
        Eigen::Matrix<local_scalar_t__, -1, -1>> err =
         stan::conditional_var_value_t<local_scalar_t__, 
           Eigen::Matrix<local_scalar_t__, -1, -1>>(
           Eigen::Matrix<double, -1, -1>::Constant(T, S,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 37;
      for (int j = 1; j <= p; ++j) {
        current_statement__ = 35;
        stan::model::assign(nu,
          stan::math::fma(
            stan::math::rep_matrix(
              stan::model::rvalue(phi, "phi", stan::model::index_uni(j)), T),
            stan::model::rvalue(D, "D",
              stan::model::index_min_max(((1 - j) + p), ((T - j) + p)),
                stan::model::index_min_max(1, S)),
            stan::model::deep_copy(nu)), "assigning variable nu");
      }
      current_statement__ = 38;
      stan::model::assign(err,
        stan::math::subtract(
          stan::model::rvalue(D, "D",
            stan::model::index_min_max((p + 1), (p + T)),
              stan::model::index_min_max(1, S)), nu),
        "assigning variable err");
      current_statement__ = 45;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 43;
        for (int j = 1; j <= q; ++j) {
          current_statement__ = 41;
          if (stan::math::logical_gt((t - j), 0)) {
            current_statement__ = 39;
            stan::model::assign(err,
              stan::math::subtract(
                stan::model::deep_copy(
                  stan::model::rvalue(err, "err",
                    stan::model::index_uni(t),
                      stan::model::index_min_max(1, S))),
                stan::math::multiply(
                  stan::model::rvalue(theta, "theta",
                    stan::model::index_uni(j)),
                  stan::model::deep_copy(
                    stan::model::rvalue(err, "err",
                      stan::model::index_uni((t - j)),
                        stan::model::index_min_max(1, S))))),
              "assigning variable err", stan::model::index_uni(t),
                                          stan::model::index_min_max(1, S));
          } 
        }
      }
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "theta", theta, -1);
      current_statement__ = 14;
      stan::math::check_less_or_equal(function__, "theta", theta, 1);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "phi", phi, -1);
      current_statement__ = 15;
      stan::math::check_less_or_equal(function__, "phi", phi, 1);
      {
        current_statement__ = 97;
        for (int j = 1; j <= p; ++j) {
          current_statement__ = 95;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(gamma_phi, "gamma_phi",
                stan::model::index_uni(j)),
              stan::model::rvalue(hyper_gamma_phi_m, "hyper_gamma_phi_m",
                stan::model::index_uni(j)),
              stan::model::rvalue(hyper_gamma_phi_s, "hyper_gamma_phi_s",
                stan::model::index_uni(j))));
        }
        current_statement__ = 98;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_th, 0, 1));
        current_statement__ = 99;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(sigma, mh_sigma, sh_sigma));
        current_statement__ = 100;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mh_sigma, 0, 1));
        current_statement__ = 101;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sh_sigma, 3, 2));
        current_statement__ = 102;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(y_0,
            stan::math::mean(media_stazione), 1));
        current_statement__ = 103;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(w,
            stan::math::mean(media_stazione), 1));
        current_statement__ = 104;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(hyper_gamma_phi_m, 0, 5));
        current_statement__ = 105;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(hyper_gamma_phi_s, 3, 2));
        current_statement__ = 106;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c, 0, 1));
        current_statement__ = 107;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(betas, 0, 1));
        current_statement__ = 110;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 108;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(err, "err",
                stan::model::index_min_max(1, T), stan::model::index_uni(s)),
              0, sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "code_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> betas;
      current_statement__ = 1;
      betas = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(reg);
      Eigen::Matrix<double, -1, 1> gamma_th;
      current_statement__ = 2;
      gamma_th = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   q);
      std::vector<Eigen::Matrix<double, 1, -1>> gamma_phi;
      current_statement__ = 3;
      gamma_phi = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(p,
                    S);
      double sigma;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double mh_sigma;
      current_statement__ = 5;
      mh_sigma = in__.template read<local_scalar_t__>();
      double sh_sigma;
      current_statement__ = 6;
      sh_sigma = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      double y_0;
      current_statement__ = 7;
      y_0 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> w;
      current_statement__ = 8;
      w = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            missing_size);
      Eigen::Matrix<double, -1, 1> c;
      current_statement__ = 9;
      c = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(S);
      Eigen::Matrix<double, -1, 1> hyper_gamma_phi_m;
      current_statement__ = 10;
      hyper_gamma_phi_m = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(p);
      Eigen::Matrix<double, -1, 1> hyper_gamma_phi_s;
      current_statement__ = 11;
      hyper_gamma_phi_s = in__.template read_constrain_lb<
                            Eigen::Matrix<local_scalar_t__, -1, 1>, 
                            jacobian__>(0, lp__, p);
      Eigen::Matrix<double, -1, -1> cos_of_day =
         Eigen::Matrix<double, -1, -1>::Constant(T, S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> regres =
         Eigen::Matrix<double, -1, -1>::Constant(T, S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> theta =
         Eigen::Matrix<double, -1, 1>::Constant(q,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, 1, -1>> phi =
         std::vector<Eigen::Matrix<double, 1, -1>>(p, 
           Eigen::Matrix<double, 1, -1>::Constant(S,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, -1> right_y =
         Eigen::Matrix<double, -1, -1>::Constant(right_y_1dim__, S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> D =
         Eigen::Matrix<double, -1, -1>::Constant(D_1dim__, S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> nu =
         Eigen::Matrix<double, -1, -1>::Constant(T, S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> err =
         Eigen::Matrix<double, -1, -1>::Constant(T, S,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(betas);
      out__.write(gamma_th);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          out__.write(gamma_phi[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma);
      out__.write(mh_sigma);
      out__.write(sh_sigma);
      out__.write(y_0);
      out__.write(w);
      out__.write(c);
      out__.write(hyper_gamma_phi_m);
      out__.write(hyper_gamma_phi_s);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 22;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        stan::model::assign(cos_of_day,
          stan::math::multiply(
            stan::model::rvalue(c, "c", stan::model::index_uni(s)),
            stan::math::cos(
              stan::math::divide(
                stan::math::multiply((2 * stan::math::pi()),
                  stan::math::cumulative_sum(stan::math::rep_vector(1, T))),
                365))),
          "assigning variable cos_of_day", stan::model::index_omni(),
                                             stan::model::index_uni(s));
      }
      current_statement__ = 13;
      stan::model::assign(regres,
        stan::math::rep_matrix(
          stan::math::transpose(stan::math::multiply(X, betas)), T),
        "assigning variable regres");
      current_statement__ = 25;
      for (int j = 1; j <= q; ++j) {
        current_statement__ = 23;
        stan::model::assign(theta,
          (stan::math::expm1(
             stan::model::rvalue(gamma_th, "gamma_th",
               stan::model::index_uni(j))) /
            (stan::math::exp(
               stan::model::rvalue(gamma_th, "gamma_th",
                 stan::model::index_uni(j))) + 1)),
          "assigning variable theta", stan::model::index_uni(j));
      }
      current_statement__ = 28;
      for (int j = 1; j <= p; ++j) {
        current_statement__ = 26;
        stan::model::assign(phi,
          stan::math::elt_divide(
            stan::math::expm1(
              stan::model::rvalue(gamma_phi, "gamma_phi",
                stan::model::index_uni(j))),
            stan::math::add(
              stan::math::exp(
                stan::model::rvalue(gamma_phi, "gamma_phi",
                  stan::model::index_uni(j))), 1)),
          "assigning variable phi", stan::model::index_uni(j));
      }
      current_statement__ = 29;
      stan::model::assign(right_y, stan::math::rep_matrix(y_0, (p + 1), S),
        "assigning variable right_y", stan::model::index_min_max(1, (p + 1)),
                                        stan::model::index_min_max(1, S));
      current_statement__ = 30;
      stan::model::assign(right_y, y,
        "assigning variable right_y", stan::model::index_min_max((p + 2), 
                                        ((T + p) + 1)),
                                        stan::model::index_min_max(1, S));
      current_statement__ = 33;
      for (int k = 1; k <= missing_size; ++k) {
        current_statement__ = 31;
        stan::model::assign(right_y,
          stan::model::rvalue(w, "w", stan::model::index_uni(k)),
          "assigning variable right_y", stan::model::index_uni(((p + 1) +
                                                                 stan::model::rvalue(
                                                                   u_mine,
                                                                   "u_mine",
                                                                   stan::model::index_uni(k)))),
                                          stan::model::index_uni(stan::model::rvalue(
                                                                   v, "v",
                                                                   stan::model::index_uni(k))));
      }
      current_statement__ = 34;
      stan::model::assign(right_y,
        stan::math::subtract(
          stan::math::subtract(
            stan::model::deep_copy(
              stan::model::rvalue(right_y, "right_y",
                stan::model::index_min_max((p + 2), ((T + p) + 1)),
                  stan::model::index_min_max(1, S))), cos_of_day), regres),
        "assigning variable right_y", stan::model::index_min_max((p + 2), 
                                        ((T + p) + 1)),
                                        stan::model::index_min_max(1, S));
      current_statement__ = 17;
      stan::model::assign(D,
        stan::math::subtract(
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(2, ((T + p) + 1)),
              stan::model::index_min_max(1, S)),
          stan::model::rvalue(right_y, "right_y",
            stan::model::index_min_max(1, (T + p)),
              stan::model::index_min_max(1, S))), "assigning variable D");
      current_statement__ = 18;
      stan::model::assign(nu, stan::math::rep_matrix(0, T, S),
        "assigning variable nu");
      current_statement__ = 37;
      for (int j = 1; j <= p; ++j) {
        current_statement__ = 35;
        stan::model::assign(nu,
          stan::math::fma(
            stan::math::rep_matrix(
              stan::model::rvalue(phi, "phi", stan::model::index_uni(j)), T),
            stan::model::rvalue(D, "D",
              stan::model::index_min_max(((1 - j) + p), ((T - j) + p)),
                stan::model::index_min_max(1, S)),
            stan::model::deep_copy(nu)), "assigning variable nu");
      }
      current_statement__ = 38;
      stan::model::assign(err,
        stan::math::subtract(
          stan::model::rvalue(D, "D",
            stan::model::index_min_max((p + 1), (p + T)),
              stan::model::index_min_max(1, S)), nu),
        "assigning variable err");
      current_statement__ = 45;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 43;
        for (int j = 1; j <= q; ++j) {
          current_statement__ = 41;
          if (stan::math::logical_gt((t - j), 0)) {
            current_statement__ = 39;
            stan::model::assign(err,
              stan::math::subtract(
                stan::model::deep_copy(
                  stan::model::rvalue(err, "err",
                    stan::model::index_uni(t),
                      stan::model::index_min_max(1, S))),
                stan::math::multiply(
                  stan::model::rvalue(theta, "theta",
                    stan::model::index_uni(j)),
                  stan::model::deep_copy(
                    stan::model::rvalue(err, "err",
                      stan::model::index_uni((t - j)),
                        stan::model::index_min_max(1, S))))),
              "assigning variable err", stan::model::index_uni(t),
                                          stan::model::index_min_max(1, S));
          } 
        }
      }
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "theta", theta, -1);
      current_statement__ = 14;
      stan::math::check_less_or_equal(function__, "theta", theta, 1);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "phi", phi, -1);
      current_statement__ = 15;
      stan::math::check_less_or_equal(function__, "phi", phi, 1);
      if (emit_transformed_parameters__) {
        out__.write(cos_of_day);
        out__.write(regres);
        out__.write(theta);
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            out__.write(phi[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(right_y);
        out__.write(D);
        out__.write(nu);
        out__.write(err);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> y_post_pred_aux =
         Eigen::Matrix<double, -1, -1>::Constant(y_post_pred_aux_1dim__, S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> err_post_pred =
         Eigen::Matrix<double, -1, -1>::Constant(T, S,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 50;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 48;
        stan::model::assign(err_post_pred,
          stan::math::to_vector(
            stan::math::normal_rng(stan::math::rep_vector(0, T), sigma,
              base_rng__)),
          "assigning variable err_post_pred", stan::model::index_min_max(1, T),
                                                stan::model::index_uni(s));
      }
      current_statement__ = 51;
      stan::model::assign(y_post_pred_aux,
        stan::math::rep_matrix(y_0, (p + 1), S),
        "assigning variable y_post_pred_aux", stan::model::index_min_max(1, 
                                                (p + 1)),
                                                stan::model::index_min_max(1, S));
      current_statement__ = 64;
      for (int t = (p + 2); t <= ((T + p) + 1); ++t) {
        current_statement__ = 52;
        stan::math::validate_non_negative_index("mean_val", "S", S);
        Eigen::Matrix<double, 1, -1> mean_val;
        current_statement__ = 53;
        stan::model::assign(mean_val, stan::math::rep_row_vector(0, S),
          "assigning variable mean_val");
        current_statement__ = 56;
        for (int j = 1; j <= p; ++j) {
          current_statement__ = 54;
          stan::model::assign(mean_val,
            stan::math::fma(
              stan::model::rvalue(phi, "phi", stan::model::index_uni(j)),
              stan::math::subtract(
                stan::model::rvalue(y_post_pred_aux, "y_post_pred_aux",
                  stan::model::index_uni((t - j))),
                stan::model::rvalue(y_post_pred_aux, "y_post_pred_aux",
                  stan::model::index_uni(((t - j) - 1)))),
              stan::model::deep_copy(mean_val)),
            "assigning variable mean_val");
        }
        current_statement__ = 61;
        for (int j = 1; j <= q; ++j) {
          current_statement__ = 59;
          if (stan::math::logical_gt((((t - p) - 1) - j), 0)) {
            current_statement__ = 57;
            stan::model::assign(mean_val,
              stan::math::fma(
                stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(j)),
                stan::model::rvalue(err_post_pred, "err_post_pred",
                  stan::model::index_uni((((t - p) - 1) - j))),
                stan::model::deep_copy(mean_val)),
              "assigning variable mean_val");
          } 
        }
        current_statement__ = 62;
        stan::model::assign(y_post_pred_aux,
          stan::math::add(
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(y_post_pred_aux, "y_post_pred_aux",
                  stan::model::index_uni((t - 1)))), mean_val),
            stan::model::rvalue(err_post_pred, "err_post_pred",
              stan::model::index_uni(((t - p) - 1)))),
          "assigning variable y_post_pred_aux", stan::model::index_uni(t),
                                                  stan::model::index_omni());
      }
      Eigen::Matrix<double, -1, -1> y_post_pred;
      current_statement__ = 65;
      stan::model::assign(y_post_pred,
        stan::math::add(
          stan::math::add(
            stan::model::rvalue(y_post_pred_aux, "y_post_pred_aux",
              stan::model::index_min_max((p + 2), ((T + p) + 1))),
            cos_of_day), regres), "assigning variable y_post_pred");
      Eigen::Matrix<double, -1, 1> annual_mean =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> annual_max =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> annual_median =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> annual_days_over_threshold =
         Eigen::Matrix<double, -1, 1>::Constant(S,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<int> is_over_daily_limit =
         std::vector<int>(S, std::numeric_limits<int>::min());
      std::vector<int> is_over_annual_limit =
         std::vector<int>(S, std::numeric_limits<int>::min());
      current_statement__ = 82;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 72;
        stan::model::assign(annual_mean,
          stan::math::mean(
            stan::model::rvalue(y_post_pred, "y_post_pred",
              stan::model::index_omni(), stan::model::index_uni(s))),
          "assigning variable annual_mean", stan::model::index_uni(s));
        current_statement__ = 73;
        stan::model::assign(annual_max,
          stan::math::max(
            stan::model::rvalue(y_post_pred, "y_post_pred",
              stan::model::index_omni(), stan::model::index_uni(s))),
          "assigning variable annual_max", stan::model::index_uni(s));
        current_statement__ = 74;
        stan::model::assign(annual_median,
          stan::math::quantile(
            stan::model::rvalue(y_post_pred, "y_post_pred",
              stan::model::index_omni(), stan::model::index_uni(s)), 0.5),
          "assigning variable annual_median", stan::model::index_uni(s));
        current_statement__ = 75;
        stan::model::assign(annual_days_over_threshold, 0,
          "assigning variable annual_days_over_threshold", stan::model::index_uni(s));
        current_statement__ = 78;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 76;
          stan::model::assign(annual_days_over_threshold,
            (stan::model::rvalue(annual_days_over_threshold,
               "annual_days_over_threshold", stan::model::index_uni(s)) +
              stan::math::logical_gt(
                stan::model::rvalue(y_post_pred, "y_post_pred",
                  stan::model::index_uni(t), stan::model::index_uni(s)),
                stan::math::log10(50))),
            "assigning variable annual_days_over_threshold", stan::model::index_uni(s));
        }
        current_statement__ = 79;
        stan::model::assign(is_over_daily_limit,
          stan::math::logical_gt(
            stan::model::rvalue(annual_days_over_threshold,
              "annual_days_over_threshold", stan::model::index_uni(s)), 35),
          "assigning variable is_over_daily_limit", stan::model::index_uni(s));
        current_statement__ = 80;
        stan::model::assign(is_over_annual_limit,
          stan::math::logical_gt(
            stan::model::rvalue(annual_mean, "annual_mean",
              stan::model::index_uni(s)), stan::math::log10(40)),
          "assigning variable is_over_annual_limit", stan::model::index_uni(s));
      }
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(log_lik_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      int index_gen;
      current_statement__ = 84;
      index_gen = 1;
      current_statement__ = 92;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 90;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 88;
          if (stan::math::logical_eq(
                stan::model::rvalue(is_missing, "is_missing",
                  stan::model::index_uni(t), stan::model::index_uni(s)), 0)) {
            current_statement__ = 85;
            stan::model::assign(log_lik,
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(err, "err",
                  stan::model::index_uni(t), stan::model::index_uni(s)), 0,
                sigma),
              "assigning variable log_lik", stan::model::index_uni(index_gen));
            current_statement__ = 86;
            index_gen = (index_gen + 1);
          } 
        }
      }
      std::vector<int> missing_index_time =
         std::vector<int>(missing_size, std::numeric_limits<int>::min());
      current_statement__ = 93;
      stan::model::assign(missing_index_time, u_mine,
        "assigning variable missing_index_time");
      std::vector<int> missing_index_station =
         std::vector<int>(missing_size, std::numeric_limits<int>::min());
      current_statement__ = 94;
      stan::model::assign(missing_index_station, v,
        "assigning variable missing_index_station");
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "missing_index_time",
                                            missing_index_time, 1);
      current_statement__ = 93;
      stan::math::check_less_or_equal(function__, "missing_index_time",
                                         missing_index_time, T);
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "missing_index_station",
                                            missing_index_station, 1);
      current_statement__ = 94;
      stan::math::check_less_or_equal(function__, "missing_index_station",
                                         missing_index_station, S);
      out__.write(y_post_pred_aux);
      out__.write(err_post_pred);
      out__.write(y_post_pred);
      out__.write(annual_mean);
      out__.write(annual_max);
      out__.write(annual_median);
      out__.write(annual_days_over_threshold);
      out__.write(is_over_daily_limit);
      out__.write(is_over_annual_limit);
      out__.write(log_lik);
      out__.write(index_gen);
      out__.write(missing_index_time);
      out__.write(missing_index_station);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> betas =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(reg, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= reg; ++sym1__) {
        stan::model::assign(betas, in__.read<local_scalar_t__>(),
          "assigning variable betas", stan::model::index_uni(sym1__));
      }
      out__.write(betas);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_th =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        stan::model::assign(gamma_th, in__.read<local_scalar_t__>(),
          "assigning variable gamma_th", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_th);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> gamma_phi =
         std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(p, 
           Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(S, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          stan::model::assign(gamma_phi, in__.read<local_scalar_t__>(),
            "assigning variable gamma_phi", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
        }
      }
      out__.write(gamma_phi);
      local_scalar_t__ sigma;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ mh_sigma;
      mh_sigma = in__.read<local_scalar_t__>();
      out__.write(mh_sigma);
      local_scalar_t__ sh_sigma;
      sh_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sh_sigma);
      local_scalar_t__ y_0;
      y_0 = in__.read<local_scalar_t__>();
      out__.write(y_0);
      Eigen::Matrix<local_scalar_t__, -1, 1> w =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(missing_size,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= missing_size; ++sym1__) {
        stan::model::assign(w, in__.read<local_scalar_t__>(),
          "assigning variable w", stan::model::index_uni(sym1__));
      }
      out__.write(w);
      Eigen::Matrix<local_scalar_t__, -1, 1> c =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(S, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        stan::model::assign(c, in__.read<local_scalar_t__>(),
          "assigning variable c", stan::model::index_uni(sym1__));
      }
      out__.write(c);
      Eigen::Matrix<local_scalar_t__, -1, 1> hyper_gamma_phi_m =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        stan::model::assign(hyper_gamma_phi_m, in__.read<local_scalar_t__>(),
          "assigning variable hyper_gamma_phi_m", stan::model::index_uni(sym1__));
      }
      out__.write(hyper_gamma_phi_m);
      Eigen::Matrix<local_scalar_t__, -1, 1> hyper_gamma_phi_s =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(p, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        stan::model::assign(hyper_gamma_phi_s, in__.read<local_scalar_t__>(),
          "assigning variable hyper_gamma_phi_s", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, hyper_gamma_phi_s);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"betas", "gamma_th", "gamma_phi",
      "sigma", "mh_sigma", "sh_sigma", "y_0", "w", "c", "hyper_gamma_phi_m",
      "hyper_gamma_phi_s", "cos_of_day", "regres", "theta", "phi", "right_y",
      "D", "nu", "err", "y_post_pred_aux", "err_post_pred", "y_post_pred",
      "annual_mean", "annual_max", "annual_median",
      "annual_days_over_threshold", "is_over_daily_limit",
      "is_over_annual_limit", "log_lik", "index_gen", "missing_index_time",
      "missing_index_station"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(reg)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(q)},
      std::vector<size_t>{static_cast<size_t>(p), static_cast<size_t>(S)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(missing_size)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(p)},
      std::vector<size_t>{static_cast<size_t>(p)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(q)},
      std::vector<size_t>{static_cast<size_t>(p), static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(right_y_1dim__),
                          static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(D_1dim__),
                          static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(y_post_pred_aux_1dim__),
                          static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(S)},
      std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(missing_size)},
      std::vector<size_t>{static_cast<size_t>(missing_size)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= reg; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_th" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "gamma_phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "mh_sigma");
    param_names__.emplace_back(std::string() + "sh_sigma");
    param_names__.emplace_back(std::string() + "y_0");
    for (int sym1__ = 1; sym1__ <= missing_size; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "hyper_gamma_phi_m" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "hyper_gamma_phi_s" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "cos_of_day" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "regres" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= right_y_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "right_y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "err" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= y_post_pred_aux_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_post_pred_aux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "err_post_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_post_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_max" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_median" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_days_over_threshold" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "is_over_daily_limit" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "is_over_annual_limit" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "index_gen");
      for (int sym1__ = 1; sym1__ <= missing_size; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "missing_index_time" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= missing_size; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "missing_index_station" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= reg; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_th" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "gamma_phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "mh_sigma");
    param_names__.emplace_back(std::string() + "sh_sigma");
    param_names__.emplace_back(std::string() + "y_0");
    for (int sym1__ = 1; sym1__ <= missing_size; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "hyper_gamma_phi_m" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "hyper_gamma_phi_s" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "cos_of_day" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "regres" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= right_y_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "right_y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "D" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "err" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= y_post_pred_aux_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_post_pred_aux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "err_post_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_post_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_max" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_median" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "annual_days_over_threshold" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "is_over_daily_limit" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "is_over_annual_limit" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "index_gen");
      for (int sym1__ = 1; sym1__ <= missing_size; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "missing_index_time" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= missing_size; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "missing_index_station" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(reg) + "},\"block\":\"parameters\"},{\"name\":\"gamma_th\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"gamma_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mh_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sh_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(missing_size) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"hyper_gamma_phi_m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"hyper_gamma_phi_s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"cos_of_day\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"regres\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"right_y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(right_y_1dim__) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(D_1dim__) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"err\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_post_pred_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(y_post_pred_aux_1dim__) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"err_post_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_post_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_max\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_median\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_days_over_threshold\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"is_over_daily_limit\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"is_over_annual_limit\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"index_gen\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"missing_index_time\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(missing_size) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"missing_index_station\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(missing_size) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(reg) + "},\"block\":\"parameters\"},{\"name\":\"gamma_th\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"gamma_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mh_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sh_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(missing_size) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"hyper_gamma_phi_m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"hyper_gamma_phi_s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"cos_of_day\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"regres\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"right_y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(right_y_1dim__) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(D_1dim__) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"err\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_post_pred_aux\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(y_post_pred_aux_1dim__) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"err_post_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_post_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_max\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_median\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"annual_days_over_threshold\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"generated_quantities\"},{\"name\":\"is_over_daily_limit\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"is_over_annual_limit\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"index_gen\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"missing_index_time\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(missing_size) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"missing_index_station\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(missing_size) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((reg + q) + (p * S)) + 1) + 1) + 1) + 1) + missing_size) + S) + p)
    + p);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((T * S) + (T * S)) + q) + (p * S)) + (right_y_1dim__ * S)) +
      (D_1dim__ * S)) + (T * S)) + (T * S));
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((((((((y_post_pred_aux_1dim__ * S) + (T * S)) + (T * S)) + S) + S) +
           S) + S) + S) + S) + log_lik_1dim__) + 1) + missing_size) +
    missing_size);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((reg + q) + (p * S)) + 1) + 1) + 1) + 1) + missing_size) + S) + p)
    + p);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((T * S) + (T * S)) + q) + (p * S)) + (right_y_1dim__ * S)) +
      (D_1dim__ * S)) + (T * S)) + (T * S));
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((((((((y_post_pred_aux_1dim__ * S) + (T * S)) + (T * S)) + S) + S) +
           S) + S) + S) + S) + log_lik_1dim__) + 1) + missing_size) +
    missing_size);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 11> names__{"betas", "gamma_th",
      "gamma_phi", "sigma", "mh_sigma", "sh_sigma", "y_0", "w", "c",
      "hyper_gamma_phi_m", "hyper_gamma_phi_s"};
      const std::array<Eigen::Index, 11> constrain_param_sizes__{reg, 
       q, (p * S), 1, 1, 1, 1, missing_size, S, p, p};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = code_model_namespace::code_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return code_model_namespace::profiles__;
}

#endif


